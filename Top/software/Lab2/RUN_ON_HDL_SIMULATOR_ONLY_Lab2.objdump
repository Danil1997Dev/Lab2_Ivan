
RUN_ON_HDL_SIMULATOR_ONLY_Lab2.elf:     file format elf32-littlenios2
RUN_ON_HDL_SIMULATOR_ONLY_Lab2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000025d0 memsz 0x000025d0 flags r-x
    LOAD off    0x000035f0 vaddr 0x000025f0 paddr 0x00003904 align 2**12
         filesz 0x00001314 memsz 0x00001314 flags rw-
    LOAD off    0x00004c18 vaddr 0x00004c18 paddr 0x00004c18 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002378  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  000025a8  000025a8  000035a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001314  000025f0  00003904  000035f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00004c18  00004c18  00004c18  2**2
                  ALLOC, SMALL_DATA
  6 .mem          00000000  00004d38  00004d38  00004904  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00004904  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000600  00000000  00000000  00004928  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000765e  00000000  00000000  00004f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002bdf  00000000  00000000  0000c586  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002e12  00000000  00000000  0000f165  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b90  00000000  00000000  00011f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001baa  00000000  00000000  00012b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000063b  00000000  00000000  000146b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001a0  00000000  00000000  00014cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0001688e  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00016891  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00016894  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00016895  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000009  00000000  00000000  00016896  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000009  00000000  00000000  0001689f  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000009  00000000  00000000  000168a8  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000006  00000000  00000000  000168b1  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000002a  00000000  00000000  000168b7  2**0
                  CONTENTS, READONLY
 25 .jdi          0000438b  00000000  00000000  000168e1  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0003a01f  00000000  00000000  0001ac6c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
000025a8 l    d  .rodata	00000000 .rodata
000025f0 l    d  .rwdata	00000000 .rwdata
00004c18 l    d  .bss	00000000 .bss
00004d38 l    d  .mem	00000000 .mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab2_bsp//obj/HAL/src/crt0.o
00000248 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 sem.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000025f0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_load.c
00000534 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
0000068c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000007c8 l     F .text	00000034 alt_dev_reg
000026d0 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000ab8 l     F .text	0000020c altera_avalon_jtag_uart_irq
00000cc4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000012fc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000151c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001650 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000167c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00001a1c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00001b7c l     F .text	0000003c alt_get_errno
00001bb8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00004c34 g     O .bss	00000004 alt_instruction_exception_handler
00000620 g     F .text	0000006c alt_main
0000034c g     F .text	00000080 _puts_r
00004c38 g     O .bss	00000100 alt_irq
00003904 g       *ABS*	00000000 __flash_rwdata_start
000025a8 g     O .rodata	00000010 divisors
00002028 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00004c18 g     O .bss	00000004 errno
00004c20 g     O .bss	00000004 alt_argv
0000b8d8 g       *ABS*	00000000 _gp
00003758 g     O .rwdata	00000180 alt_fd_list
0000204c g     F .text	00000090 alt_find_dev
00002394 g     F .text	00000028 memcpy
00001b00 g     F .text	0000007c alt_io_redirect
000003cc g     F .text	00000014 puts
000022a8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00000ebc g     F .text	0000021c altera_avalon_jtag_uart_read
0000050c g     F .text	00000028 alt_dcache_flush
000038f0 g     O .rwdata	00000004 alt_max_fd
000038d8 g     O .rwdata	00000004 _global_impure_ptr
00004d38 g       *ABS*	00000000 __bss_end
0000192c g     F .text	000000f0 alt_iic_isr_register
00001f20 g     F .text	00000108 alt_tick
000018e0 g     F .text	0000004c alt_ic_irq_enabled
00000000 g       *ABS*	00000000 __alt_mem_mem
00001e84 g     F .text	0000009c alt_alarm_stop
00004c28 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00003730 g     O .rwdata	00000028 alt_dev_null
00001630 g     F .text	00000020 alt_dcache_flush_all
00003904 g       *ABS*	00000000 __ram_rwdata_end
000038e8 g     O .rwdata	00000008 alt_dev_list
000006c8 g     F .text	00000100 write
000025f0 g       *ABS*	00000000 __ram_rodata_end
00004d38 g       *ABS*	00000000 end
000009f8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
00001374 g     F .text	0000007c alt_avalon_timer_sc_init
000010d8 g     F .text	00000224 altera_avalon_jtag_uart_write
000023bc g     F .text	00000190 __call_exitprocs
00000230 g     F .text	0000001c _start
00004c2c g     O .bss	00000004 _alt_tick_rate
00004c30 g     O .bss	00000004 _alt_nticks
00000834 g     F .text	00000060 alt_sys_init
00000d64 g     F .text	00000068 altera_avalon_jtag_uart_close
0000254c g     F .text	00000028 .hidden __mulsi3
000025f0 g       *ABS*	00000000 __ram_rwdata_start
000025a8 g       *ABS*	00000000 __ram_rodata_start
00000894 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000021e4 g     F .text	000000c4 alt_get_fd
00002364 g     F .text	00000030 memcmp
00000954 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00004d38 g       *ABS*	00000000 __alt_stack_base
000009a4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000020dc g     F .text	00000108 alt_find_file
000016b8 g     F .text	000000a4 alt_dev_llist_insert
000003fc g     F .text	000000b8 __sfvwrite_small_dev
00004c18 g       *ABS*	00000000 __bss_start
0000024c g     F .text	00000100 main
00004c24 g     O .bss	00000004 alt_envp
000008f4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000038f4 g     O .rwdata	00000004 alt_errno
000025a8 g       *ABS*	00000000 __flash_rodata_start
000007fc g     F .text	00000038 alt_irq_init
00001e00 g     F .text	00000084 alt_release_fd
000004b4 g     F .text	00000058 _write_r
000038dc g     O .rwdata	00000004 _impure_ptr
00004c1c g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
000038e0 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000177c g     F .text	00000050 alt_ic_isr_register
00003904 g       *ABS*	00000000 _edata
00004d38 g       *ABS*	00000000 _end
00000230 g       *ABS*	00000000 __ram_exceptions_end
00000dcc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00001854 g     F .text	0000008c alt_ic_irq_disable
00002344 g     F .text	00000020 exit
00020000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00002574 g     F .text	00000034 _exit
000013f0 g     F .text	0000012c alt_alarm_start
000003e0 g     F .text	0000001c strlen
00001ca4 g     F .text	0000015c open
0000175c g     F .text	00000020 alt_icache_flush_all
000038f8 g     O .rwdata	00000004 alt_priority_mask
000017cc g     F .text	00000088 alt_ic_irq_enable
000038fc g     O .rwdata	00000008 alt_alarm_list
00001558 g     F .text	000000d8 close
0000059c g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800034 	movhi	r2,0
 140:	10930e04 	addi	r2,r2,19512
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800034 	movhi	r2,0
 158:	10930e04 	addi	r2,r2,19512
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a4d717 	ldw	r2,-27812(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a4d717 	ldw	r2,-27812(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     23c:	d6ae3614 	ori	gp,gp,47320
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     240:	000059c0 	call	59c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     244:	00006200 	call	620 <alt_main>

00000248 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     248:	003fff06 	br	248 <__alt_data_end+0xfffe0248>

0000024c <main>:
		{150,250,200,10},
		{250,250,250,10}
};

int main()
{ 
     24c:	defffa04 	addi	sp,sp,-24
     250:	dfc00515 	stw	ra,20(sp)
     254:	df000415 	stw	fp,16(sp)
     258:	df000404 	addi	fp,sp,16
	int i,j,n;
	alt_u32 tmp;

	n = 0;
     25c:	e03ffe15 	stw	zero,-8(fp)
	//program divisors
	n = 0;
     260:	e03ffe15 	stw	zero,-8(fp)
	for (i=0; i<TIME_SETS; i++)
     264:	e03ffc15 	stw	zero,-16(fp)
     268:	00002806 	br	30c <main+0xc0>
	{
		tmp = 0;
     26c:	e03fff15 	stw	zero,-4(fp)
		for (j=TIME_STATES; j>0; j--)
     270:	00800104 	movi	r2,4
     274:	e0bffd15 	stw	r2,-12(fp)
     278:	00001206 	br	2c4 <main+0x78>
		{
			tmp = (tmp << 8) | divisors[i][j-1];
     27c:	e0bfff17 	ldw	r2,-4(fp)
     280:	1008923a 	slli	r4,r2,8
     284:	e0bffd17 	ldw	r2,-12(fp)
     288:	117fffc4 	addi	r5,r2,-1
     28c:	00800034 	movhi	r2,0
     290:	10896a04 	addi	r2,r2,9640
     294:	e0fffc17 	ldw	r3,-16(fp)
     298:	18c7883a 	add	r3,r3,r3
     29c:	18c7883a 	add	r3,r3,r3
     2a0:	10c5883a 	add	r2,r2,r3
     2a4:	1145883a 	add	r2,r2,r5
     2a8:	10800003 	ldbu	r2,0(r2)
     2ac:	10803fcc 	andi	r2,r2,255
     2b0:	2084b03a 	or	r2,r4,r2
     2b4:	e0bfff15 	stw	r2,-4(fp)
	//program divisors
	n = 0;
	for (i=0; i<TIME_SETS; i++)
	{
		tmp = 0;
		for (j=TIME_STATES; j>0; j--)
     2b8:	e0bffd17 	ldw	r2,-12(fp)
     2bc:	10bfffc4 	addi	r2,r2,-1
     2c0:	e0bffd15 	stw	r2,-12(fp)
     2c4:	e0bffd17 	ldw	r2,-12(fp)
     2c8:	00bfec16 	blt	zero,r2,27c <__alt_data_end+0xfffe027c>
		{
			tmp = (tmp << 8) | divisors[i][j-1];
		}
		IOWR_ALTERA_AVALON_SEM_TIME_SET(SEM_BASE,n,tmp);
     2cc:	e0bffe17 	ldw	r2,-8(fp)
     2d0:	10800104 	addi	r2,r2,4
     2d4:	1085883a 	add	r2,r2,r2
     2d8:	1085883a 	add	r2,r2,r2
     2dc:	1007883a 	mov	r3,r2
     2e0:	008000b4 	movhi	r2,2
     2e4:	10840004 	addi	r2,r2,4096
     2e8:	1885883a 	add	r2,r3,r2
     2ec:	e0ffff17 	ldw	r3,-4(fp)
     2f0:	10c00035 	stwio	r3,0(r2)
		n++;
     2f4:	e0bffe17 	ldw	r2,-8(fp)
     2f8:	10800044 	addi	r2,r2,1
     2fc:	e0bffe15 	stw	r2,-8(fp)
	alt_u32 tmp;

	n = 0;
	//program divisors
	n = 0;
	for (i=0; i<TIME_SETS; i++)
     300:	e0bffc17 	ldw	r2,-16(fp)
     304:	10800044 	addi	r2,r2,1
     308:	e0bffc15 	stw	r2,-16(fp)
     30c:	e0bffc17 	ldw	r2,-16(fp)
     310:	10800110 	cmplti	r2,r2,4
     314:	103fd51e 	bne	r2,zero,26c <__alt_data_end+0xfffe026c>
		IOWR_ALTERA_AVALON_SEM_TIME_SET(SEM_BASE,n,tmp);
		n++;
	}
	//since we use pointers (cached data access) to write divisor RAM, 
	//and not direct i/o access with IOWR, we need to flush cache
	alt_dcache_flush();
     318:	000050c0 	call	50c <alt_dcache_flush>

	printf("Ready\n");
     31c:	01000034 	movhi	r4,0
     320:	21096e04 	addi	r4,r4,9656
     324:	00003cc0 	call	3cc <puts>

	IOWR_ALTERA_AVALON_SEM_DIVSET(SEM_BASE,0x00);
     328:	0007883a 	mov	r3,zero
     32c:	008000b4 	movhi	r2,2
     330:	10840104 	addi	r2,r2,4100
     334:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_SEM_CTL(SEM_BASE,0x01);
     338:	00c00044 	movi	r3,1
     33c:	008000b4 	movhi	r2,2
     340:	10840004 	addi	r2,r2,4096
     344:	10c00035 	stwio	r3,0(r2)

	
	while (1)
	{

	}
     348:	003fff06 	br	348 <__alt_data_end+0xfffe0348>

0000034c <_puts_r>:
     34c:	defffd04 	addi	sp,sp,-12
     350:	dc000015 	stw	r16,0(sp)
     354:	2021883a 	mov	r16,r4
     358:	2809883a 	mov	r4,r5
     35c:	dfc00215 	stw	ra,8(sp)
     360:	dc400115 	stw	r17,4(sp)
     364:	2823883a 	mov	r17,r5
     368:	00003e00 	call	3e0 <strlen>
     36c:	81400217 	ldw	r5,8(r16)
     370:	01000034 	movhi	r4,0
     374:	2100ff04 	addi	r4,r4,1020
     378:	29000115 	stw	r4,4(r5)
     37c:	100f883a 	mov	r7,r2
     380:	880d883a 	mov	r6,r17
     384:	8009883a 	mov	r4,r16
     388:	00003fc0 	call	3fc <__sfvwrite_small_dev>
     38c:	00ffffc4 	movi	r3,-1
     390:	10c00926 	beq	r2,r3,3b8 <_puts_r+0x6c>
     394:	81400217 	ldw	r5,8(r16)
     398:	01800034 	movhi	r6,0
     39c:	01c00044 	movi	r7,1
     3a0:	28800117 	ldw	r2,4(r5)
     3a4:	31897004 	addi	r6,r6,9664
     3a8:	8009883a 	mov	r4,r16
     3ac:	103ee83a 	callr	r2
     3b0:	10bfffe0 	cmpeqi	r2,r2,-1
     3b4:	0085c83a 	sub	r2,zero,r2
     3b8:	dfc00217 	ldw	ra,8(sp)
     3bc:	dc400117 	ldw	r17,4(sp)
     3c0:	dc000017 	ldw	r16,0(sp)
     3c4:	dec00304 	addi	sp,sp,12
     3c8:	f800283a 	ret

000003cc <puts>:
     3cc:	00800034 	movhi	r2,0
     3d0:	108e3704 	addi	r2,r2,14556
     3d4:	200b883a 	mov	r5,r4
     3d8:	11000017 	ldw	r4,0(r2)
     3dc:	000034c1 	jmpi	34c <_puts_r>

000003e0 <strlen>:
     3e0:	2005883a 	mov	r2,r4
     3e4:	10c00007 	ldb	r3,0(r2)
     3e8:	18000226 	beq	r3,zero,3f4 <strlen+0x14>
     3ec:	10800044 	addi	r2,r2,1
     3f0:	003ffc06 	br	3e4 <__alt_data_end+0xfffe03e4>
     3f4:	1105c83a 	sub	r2,r2,r4
     3f8:	f800283a 	ret

000003fc <__sfvwrite_small_dev>:
     3fc:	2880000b 	ldhu	r2,0(r5)
     400:	1080020c 	andi	r2,r2,8
     404:	10002126 	beq	r2,zero,48c <__sfvwrite_small_dev+0x90>
     408:	2880008f 	ldh	r2,2(r5)
     40c:	defffa04 	addi	sp,sp,-24
     410:	dc000015 	stw	r16,0(sp)
     414:	dfc00515 	stw	ra,20(sp)
     418:	dd000415 	stw	r20,16(sp)
     41c:	dcc00315 	stw	r19,12(sp)
     420:	dc800215 	stw	r18,8(sp)
     424:	dc400115 	stw	r17,4(sp)
     428:	2821883a 	mov	r16,r5
     42c:	10001216 	blt	r2,zero,478 <__sfvwrite_small_dev+0x7c>
     430:	2027883a 	mov	r19,r4
     434:	3025883a 	mov	r18,r6
     438:	3823883a 	mov	r17,r7
     43c:	05010004 	movi	r20,1024
     440:	04400b0e 	bge	zero,r17,470 <__sfvwrite_small_dev+0x74>
     444:	880f883a 	mov	r7,r17
     448:	a440010e 	bge	r20,r17,450 <__sfvwrite_small_dev+0x54>
     44c:	01c10004 	movi	r7,1024
     450:	8140008f 	ldh	r5,2(r16)
     454:	900d883a 	mov	r6,r18
     458:	9809883a 	mov	r4,r19
     45c:	00004b40 	call	4b4 <_write_r>
     460:	0080050e 	bge	zero,r2,478 <__sfvwrite_small_dev+0x7c>
     464:	88a3c83a 	sub	r17,r17,r2
     468:	90a5883a 	add	r18,r18,r2
     46c:	003ff406 	br	440 <__alt_data_end+0xfffe0440>
     470:	0005883a 	mov	r2,zero
     474:	00000706 	br	494 <__sfvwrite_small_dev+0x98>
     478:	8080000b 	ldhu	r2,0(r16)
     47c:	10801014 	ori	r2,r2,64
     480:	8080000d 	sth	r2,0(r16)
     484:	00bfffc4 	movi	r2,-1
     488:	00000206 	br	494 <__sfvwrite_small_dev+0x98>
     48c:	00bfffc4 	movi	r2,-1
     490:	f800283a 	ret
     494:	dfc00517 	ldw	ra,20(sp)
     498:	dd000417 	ldw	r20,16(sp)
     49c:	dcc00317 	ldw	r19,12(sp)
     4a0:	dc800217 	ldw	r18,8(sp)
     4a4:	dc400117 	ldw	r17,4(sp)
     4a8:	dc000017 	ldw	r16,0(sp)
     4ac:	dec00604 	addi	sp,sp,24
     4b0:	f800283a 	ret

000004b4 <_write_r>:
     4b4:	defffd04 	addi	sp,sp,-12
     4b8:	dc000015 	stw	r16,0(sp)
     4bc:	04000034 	movhi	r16,0
     4c0:	dc400115 	stw	r17,4(sp)
     4c4:	84130604 	addi	r16,r16,19480
     4c8:	2023883a 	mov	r17,r4
     4cc:	2809883a 	mov	r4,r5
     4d0:	300b883a 	mov	r5,r6
     4d4:	380d883a 	mov	r6,r7
     4d8:	dfc00215 	stw	ra,8(sp)
     4dc:	80000015 	stw	zero,0(r16)
     4e0:	00006c80 	call	6c8 <write>
     4e4:	00ffffc4 	movi	r3,-1
     4e8:	10c0031e 	bne	r2,r3,4f8 <_write_r+0x44>
     4ec:	80c00017 	ldw	r3,0(r16)
     4f0:	18000126 	beq	r3,zero,4f8 <_write_r+0x44>
     4f4:	88c00015 	stw	r3,0(r17)
     4f8:	dfc00217 	ldw	ra,8(sp)
     4fc:	dc400117 	ldw	r17,4(sp)
     500:	dc000017 	ldw	r16,0(sp)
     504:	dec00304 	addi	sp,sp,12
     508:	f800283a 	ret

0000050c <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
     50c:	defffd04 	addi	sp,sp,-12
     510:	df000215 	stw	fp,8(sp)
     514:	df000204 	addi	fp,sp,8
     518:	e13ffe15 	stw	r4,-8(fp)
     51c:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
     520:	0001883a 	nop
     524:	e037883a 	mov	sp,fp
     528:	df000017 	ldw	fp,0(sp)
     52c:	dec00104 	addi	sp,sp,4
     530:	f800283a 	ret

00000534 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     534:	defffc04 	addi	sp,sp,-16
     538:	df000315 	stw	fp,12(sp)
     53c:	df000304 	addi	fp,sp,12
     540:	e13ffd15 	stw	r4,-12(fp)
     544:	e17ffe15 	stw	r5,-8(fp)
     548:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     54c:	e0fffe17 	ldw	r3,-8(fp)
     550:	e0bffd17 	ldw	r2,-12(fp)
     554:	18800c26 	beq	r3,r2,588 <alt_load_section+0x54>
  {
    while( to != end )
     558:	00000806 	br	57c <alt_load_section+0x48>
    {
      *to++ = *from++;
     55c:	e0bffe17 	ldw	r2,-8(fp)
     560:	10c00104 	addi	r3,r2,4
     564:	e0fffe15 	stw	r3,-8(fp)
     568:	e0fffd17 	ldw	r3,-12(fp)
     56c:	19000104 	addi	r4,r3,4
     570:	e13ffd15 	stw	r4,-12(fp)
     574:	18c00017 	ldw	r3,0(r3)
     578:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     57c:	e0fffe17 	ldw	r3,-8(fp)
     580:	e0bfff17 	ldw	r2,-4(fp)
     584:	18bff51e 	bne	r3,r2,55c <__alt_data_end+0xfffe055c>
    {
      *to++ = *from++;
    }
  }
}
     588:	0001883a 	nop
     58c:	e037883a 	mov	sp,fp
     590:	df000017 	ldw	fp,0(sp)
     594:	dec00104 	addi	sp,sp,4
     598:	f800283a 	ret

0000059c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     59c:	defffe04 	addi	sp,sp,-8
     5a0:	dfc00115 	stw	ra,4(sp)
     5a4:	df000015 	stw	fp,0(sp)
     5a8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     5ac:	01800034 	movhi	r6,0
     5b0:	318e4104 	addi	r6,r6,14596
     5b4:	01400034 	movhi	r5,0
     5b8:	29497c04 	addi	r5,r5,9712
     5bc:	01000034 	movhi	r4,0
     5c0:	210e4104 	addi	r4,r4,14596
     5c4:	00005340 	call	534 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     5c8:	01800034 	movhi	r6,0
     5cc:	31808c04 	addi	r6,r6,560
     5d0:	01400034 	movhi	r5,0
     5d4:	29400804 	addi	r5,r5,32
     5d8:	01000034 	movhi	r4,0
     5dc:	21000804 	addi	r4,r4,32
     5e0:	00005340 	call	534 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     5e4:	01800034 	movhi	r6,0
     5e8:	31897c04 	addi	r6,r6,9712
     5ec:	01400034 	movhi	r5,0
     5f0:	29496a04 	addi	r5,r5,9640
     5f4:	01000034 	movhi	r4,0
     5f8:	21096a04 	addi	r4,r4,9640
     5fc:	00005340 	call	534 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     600:	00016300 	call	1630 <alt_dcache_flush_all>
  alt_icache_flush_all();
     604:	000175c0 	call	175c <alt_icache_flush_all>
}
     608:	0001883a 	nop
     60c:	e037883a 	mov	sp,fp
     610:	dfc00117 	ldw	ra,4(sp)
     614:	df000017 	ldw	fp,0(sp)
     618:	dec00204 	addi	sp,sp,8
     61c:	f800283a 	ret

00000620 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     620:	defffd04 	addi	sp,sp,-12
     624:	dfc00215 	stw	ra,8(sp)
     628:	df000115 	stw	fp,4(sp)
     62c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     630:	0009883a 	mov	r4,zero
     634:	00007fc0 	call	7fc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     638:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     63c:	00008340 	call	834 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     640:	01800034 	movhi	r6,0
     644:	31897104 	addi	r6,r6,9668
     648:	01400034 	movhi	r5,0
     64c:	29497104 	addi	r5,r5,9668
     650:	01000034 	movhi	r4,0
     654:	21097104 	addi	r4,r4,9668
     658:	0001b000 	call	1b00 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     65c:	d0a4d117 	ldw	r2,-27836(gp)
     660:	d0e4d217 	ldw	r3,-27832(gp)
     664:	d124d317 	ldw	r4,-27828(gp)
     668:	200d883a 	mov	r6,r4
     66c:	180b883a 	mov	r5,r3
     670:	1009883a 	mov	r4,r2
     674:	000024c0 	call	24c <main>
     678:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     67c:	01000044 	movi	r4,1
     680:	00015580 	call	1558 <close>
  exit (result);
     684:	e13fff17 	ldw	r4,-4(fp)
     688:	00023440 	call	2344 <exit>

0000068c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
     68c:	defffe04 	addi	sp,sp,-8
     690:	dfc00115 	stw	ra,4(sp)
     694:	df000015 	stw	fp,0(sp)
     698:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
     69c:	d0a00717 	ldw	r2,-32740(gp)
     6a0:	10000326 	beq	r2,zero,6b0 <alt_get_errno+0x24>
     6a4:	d0a00717 	ldw	r2,-32740(gp)
     6a8:	103ee83a 	callr	r2
     6ac:	00000106 	br	6b4 <alt_get_errno+0x28>
     6b0:	d0a4d004 	addi	r2,gp,-27840
}
     6b4:	e037883a 	mov	sp,fp
     6b8:	dfc00117 	ldw	ra,4(sp)
     6bc:	df000017 	ldw	fp,0(sp)
     6c0:	dec00204 	addi	sp,sp,8
     6c4:	f800283a 	ret

000006c8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
     6c8:	defff904 	addi	sp,sp,-28
     6cc:	dfc00615 	stw	ra,24(sp)
     6d0:	df000515 	stw	fp,20(sp)
     6d4:	df000504 	addi	fp,sp,20
     6d8:	e13ffd15 	stw	r4,-12(fp)
     6dc:	e17ffe15 	stw	r5,-8(fp)
     6e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
     6e4:	e0bffd17 	ldw	r2,-12(fp)
     6e8:	10000816 	blt	r2,zero,70c <write+0x44>
     6ec:	01400304 	movi	r5,12
     6f0:	e13ffd17 	ldw	r4,-12(fp)
     6f4:	000254c0 	call	254c <__mulsi3>
     6f8:	1007883a 	mov	r3,r2
     6fc:	00800034 	movhi	r2,0
     700:	108dd604 	addi	r2,r2,14168
     704:	1885883a 	add	r2,r3,r2
     708:	00000106 	br	710 <write+0x48>
     70c:	0005883a 	mov	r2,zero
     710:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
     714:	e0bffb17 	ldw	r2,-20(fp)
     718:	10002126 	beq	r2,zero,7a0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
     71c:	e0bffb17 	ldw	r2,-20(fp)
     720:	10800217 	ldw	r2,8(r2)
     724:	108000cc 	andi	r2,r2,3
     728:	10001826 	beq	r2,zero,78c <write+0xc4>
     72c:	e0bffb17 	ldw	r2,-20(fp)
     730:	10800017 	ldw	r2,0(r2)
     734:	10800617 	ldw	r2,24(r2)
     738:	10001426 	beq	r2,zero,78c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
     73c:	e0bffb17 	ldw	r2,-20(fp)
     740:	10800017 	ldw	r2,0(r2)
     744:	10800617 	ldw	r2,24(r2)
     748:	e0ffff17 	ldw	r3,-4(fp)
     74c:	180d883a 	mov	r6,r3
     750:	e17ffe17 	ldw	r5,-8(fp)
     754:	e13ffb17 	ldw	r4,-20(fp)
     758:	103ee83a 	callr	r2
     75c:	e0bffc15 	stw	r2,-16(fp)
     760:	e0bffc17 	ldw	r2,-16(fp)
     764:	1000070e 	bge	r2,zero,784 <write+0xbc>
      {
        ALT_ERRNO = -rval;
     768:	000068c0 	call	68c <alt_get_errno>
     76c:	1007883a 	mov	r3,r2
     770:	e0bffc17 	ldw	r2,-16(fp)
     774:	0085c83a 	sub	r2,zero,r2
     778:	18800015 	stw	r2,0(r3)
        return -1;
     77c:	00bfffc4 	movi	r2,-1
     780:	00000c06 	br	7b4 <write+0xec>
      }
      return rval;
     784:	e0bffc17 	ldw	r2,-16(fp)
     788:	00000a06 	br	7b4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
     78c:	000068c0 	call	68c <alt_get_errno>
     790:	1007883a 	mov	r3,r2
     794:	00800344 	movi	r2,13
     798:	18800015 	stw	r2,0(r3)
     79c:	00000406 	br	7b0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
     7a0:	000068c0 	call	68c <alt_get_errno>
     7a4:	1007883a 	mov	r3,r2
     7a8:	00801444 	movi	r2,81
     7ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
     7b0:	00bfffc4 	movi	r2,-1
}
     7b4:	e037883a 	mov	sp,fp
     7b8:	dfc00117 	ldw	ra,4(sp)
     7bc:	df000017 	ldw	fp,0(sp)
     7c0:	dec00204 	addi	sp,sp,8
     7c4:	f800283a 	ret

000007c8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     7c8:	defffd04 	addi	sp,sp,-12
     7cc:	dfc00215 	stw	ra,8(sp)
     7d0:	df000115 	stw	fp,4(sp)
     7d4:	df000104 	addi	fp,sp,4
     7d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     7dc:	d1600404 	addi	r5,gp,-32752
     7e0:	e13fff17 	ldw	r4,-4(fp)
     7e4:	00016b80 	call	16b8 <alt_dev_llist_insert>
}
     7e8:	e037883a 	mov	sp,fp
     7ec:	dfc00117 	ldw	ra,4(sp)
     7f0:	df000017 	ldw	fp,0(sp)
     7f4:	dec00204 	addi	sp,sp,8
     7f8:	f800283a 	ret

000007fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     7fc:	defffd04 	addi	sp,sp,-12
     800:	dfc00215 	stw	ra,8(sp)
     804:	df000115 	stw	fp,4(sp)
     808:	df000104 	addi	fp,sp,4
     80c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
     810:	00020280 	call	2028 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     814:	00800044 	movi	r2,1
     818:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     81c:	0001883a 	nop
     820:	e037883a 	mov	sp,fp
     824:	dfc00117 	ldw	ra,4(sp)
     828:	df000017 	ldw	fp,0(sp)
     82c:	dec00204 	addi	sp,sp,8
     830:	f800283a 	ret

00000834 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     834:	defffe04 	addi	sp,sp,-8
     838:	dfc00115 	stw	ra,4(sp)
     83c:	df000015 	stw	fp,0(sp)
     840:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
     844:	01c0fa04 	movi	r7,1000
     848:	000d883a 	mov	r6,zero
     84c:	000b883a 	mov	r5,zero
     850:	010000b4 	movhi	r4,2
     854:	21040804 	addi	r4,r4,4128
     858:	00013740 	call	1374 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
     85c:	01800044 	movi	r6,1
     860:	000b883a 	mov	r5,zero
     864:	01000034 	movhi	r4,0
     868:	2109be04 	addi	r4,r4,9976
     86c:	00009f80 	call	9f8 <altera_avalon_jtag_uart_init>
     870:	01000034 	movhi	r4,0
     874:	2109b404 	addi	r4,r4,9936
     878:	00007c80 	call	7c8 <alt_dev_reg>
}
     87c:	0001883a 	nop
     880:	e037883a 	mov	sp,fp
     884:	dfc00117 	ldw	ra,4(sp)
     888:	df000017 	ldw	fp,0(sp)
     88c:	dec00204 	addi	sp,sp,8
     890:	f800283a 	ret

00000894 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     894:	defffa04 	addi	sp,sp,-24
     898:	dfc00515 	stw	ra,20(sp)
     89c:	df000415 	stw	fp,16(sp)
     8a0:	df000404 	addi	fp,sp,16
     8a4:	e13ffd15 	stw	r4,-12(fp)
     8a8:	e17ffe15 	stw	r5,-8(fp)
     8ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     8b0:	e0bffd17 	ldw	r2,-12(fp)
     8b4:	10800017 	ldw	r2,0(r2)
     8b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     8bc:	e0bffc17 	ldw	r2,-16(fp)
     8c0:	10c00a04 	addi	r3,r2,40
     8c4:	e0bffd17 	ldw	r2,-12(fp)
     8c8:	10800217 	ldw	r2,8(r2)
     8cc:	100f883a 	mov	r7,r2
     8d0:	e1bfff17 	ldw	r6,-4(fp)
     8d4:	e17ffe17 	ldw	r5,-8(fp)
     8d8:	1809883a 	mov	r4,r3
     8dc:	0000ebc0 	call	ebc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     8e0:	e037883a 	mov	sp,fp
     8e4:	dfc00117 	ldw	ra,4(sp)
     8e8:	df000017 	ldw	fp,0(sp)
     8ec:	dec00204 	addi	sp,sp,8
     8f0:	f800283a 	ret

000008f4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     8f4:	defffa04 	addi	sp,sp,-24
     8f8:	dfc00515 	stw	ra,20(sp)
     8fc:	df000415 	stw	fp,16(sp)
     900:	df000404 	addi	fp,sp,16
     904:	e13ffd15 	stw	r4,-12(fp)
     908:	e17ffe15 	stw	r5,-8(fp)
     90c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     910:	e0bffd17 	ldw	r2,-12(fp)
     914:	10800017 	ldw	r2,0(r2)
     918:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     91c:	e0bffc17 	ldw	r2,-16(fp)
     920:	10c00a04 	addi	r3,r2,40
     924:	e0bffd17 	ldw	r2,-12(fp)
     928:	10800217 	ldw	r2,8(r2)
     92c:	100f883a 	mov	r7,r2
     930:	e1bfff17 	ldw	r6,-4(fp)
     934:	e17ffe17 	ldw	r5,-8(fp)
     938:	1809883a 	mov	r4,r3
     93c:	00010d80 	call	10d8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     940:	e037883a 	mov	sp,fp
     944:	dfc00117 	ldw	ra,4(sp)
     948:	df000017 	ldw	fp,0(sp)
     94c:	dec00204 	addi	sp,sp,8
     950:	f800283a 	ret

00000954 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     954:	defffc04 	addi	sp,sp,-16
     958:	dfc00315 	stw	ra,12(sp)
     95c:	df000215 	stw	fp,8(sp)
     960:	df000204 	addi	fp,sp,8
     964:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     968:	e0bfff17 	ldw	r2,-4(fp)
     96c:	10800017 	ldw	r2,0(r2)
     970:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     974:	e0bffe17 	ldw	r2,-8(fp)
     978:	10c00a04 	addi	r3,r2,40
     97c:	e0bfff17 	ldw	r2,-4(fp)
     980:	10800217 	ldw	r2,8(r2)
     984:	100b883a 	mov	r5,r2
     988:	1809883a 	mov	r4,r3
     98c:	0000d640 	call	d64 <altera_avalon_jtag_uart_close>
}
     990:	e037883a 	mov	sp,fp
     994:	dfc00117 	ldw	ra,4(sp)
     998:	df000017 	ldw	fp,0(sp)
     99c:	dec00204 	addi	sp,sp,8
     9a0:	f800283a 	ret

000009a4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     9a4:	defffa04 	addi	sp,sp,-24
     9a8:	dfc00515 	stw	ra,20(sp)
     9ac:	df000415 	stw	fp,16(sp)
     9b0:	df000404 	addi	fp,sp,16
     9b4:	e13ffd15 	stw	r4,-12(fp)
     9b8:	e17ffe15 	stw	r5,-8(fp)
     9bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
     9c0:	e0bffd17 	ldw	r2,-12(fp)
     9c4:	10800017 	ldw	r2,0(r2)
     9c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     9cc:	e0bffc17 	ldw	r2,-16(fp)
     9d0:	10800a04 	addi	r2,r2,40
     9d4:	e1bfff17 	ldw	r6,-4(fp)
     9d8:	e17ffe17 	ldw	r5,-8(fp)
     9dc:	1009883a 	mov	r4,r2
     9e0:	0000dcc0 	call	dcc <altera_avalon_jtag_uart_ioctl>
}
     9e4:	e037883a 	mov	sp,fp
     9e8:	dfc00117 	ldw	ra,4(sp)
     9ec:	df000017 	ldw	fp,0(sp)
     9f0:	dec00204 	addi	sp,sp,8
     9f4:	f800283a 	ret

000009f8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     9f8:	defffa04 	addi	sp,sp,-24
     9fc:	dfc00515 	stw	ra,20(sp)
     a00:	df000415 	stw	fp,16(sp)
     a04:	df000404 	addi	fp,sp,16
     a08:	e13ffd15 	stw	r4,-12(fp)
     a0c:	e17ffe15 	stw	r5,-8(fp)
     a10:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     a14:	e0bffd17 	ldw	r2,-12(fp)
     a18:	00c00044 	movi	r3,1
     a1c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     a20:	e0bffd17 	ldw	r2,-12(fp)
     a24:	10800017 	ldw	r2,0(r2)
     a28:	10800104 	addi	r2,r2,4
     a2c:	1007883a 	mov	r3,r2
     a30:	e0bffd17 	ldw	r2,-12(fp)
     a34:	10800817 	ldw	r2,32(r2)
     a38:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
     a3c:	e0bffe17 	ldw	r2,-8(fp)
     a40:	e0ffff17 	ldw	r3,-4(fp)
     a44:	d8000015 	stw	zero,0(sp)
     a48:	e1fffd17 	ldw	r7,-12(fp)
     a4c:	01800034 	movhi	r6,0
     a50:	3182ae04 	addi	r6,r6,2744
     a54:	180b883a 	mov	r5,r3
     a58:	1009883a 	mov	r4,r2
     a5c:	000177c0 	call	177c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     a60:	e0bffd17 	ldw	r2,-12(fp)
     a64:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     a68:	e0bffd17 	ldw	r2,-12(fp)
     a6c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     a70:	d0e4d517 	ldw	r3,-27820(gp)
     a74:	e1fffd17 	ldw	r7,-12(fp)
     a78:	01800034 	movhi	r6,0
     a7c:	31833104 	addi	r6,r6,3268
     a80:	180b883a 	mov	r5,r3
     a84:	1009883a 	mov	r4,r2
     a88:	00013f00 	call	13f0 <alt_alarm_start>
     a8c:	1000040e 	bge	r2,zero,aa0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     a90:	e0fffd17 	ldw	r3,-12(fp)
     a94:	00a00034 	movhi	r2,32768
     a98:	10bfffc4 	addi	r2,r2,-1
     a9c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     aa0:	0001883a 	nop
     aa4:	e037883a 	mov	sp,fp
     aa8:	dfc00117 	ldw	ra,4(sp)
     aac:	df000017 	ldw	fp,0(sp)
     ab0:	dec00204 	addi	sp,sp,8
     ab4:	f800283a 	ret

00000ab8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
     ab8:	defff804 	addi	sp,sp,-32
     abc:	df000715 	stw	fp,28(sp)
     ac0:	df000704 	addi	fp,sp,28
     ac4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
     ac8:	e0bfff17 	ldw	r2,-4(fp)
     acc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
     ad0:	e0bffb17 	ldw	r2,-20(fp)
     ad4:	10800017 	ldw	r2,0(r2)
     ad8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     adc:	e0bffc17 	ldw	r2,-16(fp)
     ae0:	10800104 	addi	r2,r2,4
     ae4:	10800037 	ldwio	r2,0(r2)
     ae8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     aec:	e0bffd17 	ldw	r2,-12(fp)
     af0:	1080c00c 	andi	r2,r2,768
     af4:	10006d26 	beq	r2,zero,cac <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     af8:	e0bffd17 	ldw	r2,-12(fp)
     afc:	1080400c 	andi	r2,r2,256
     b00:	10003526 	beq	r2,zero,bd8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
     b04:	00800074 	movhi	r2,1
     b08:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     b0c:	e0bffb17 	ldw	r2,-20(fp)
     b10:	10800a17 	ldw	r2,40(r2)
     b14:	10800044 	addi	r2,r2,1
     b18:	1081ffcc 	andi	r2,r2,2047
     b1c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
     b20:	e0bffb17 	ldw	r2,-20(fp)
     b24:	10c00b17 	ldw	r3,44(r2)
     b28:	e0bffe17 	ldw	r2,-8(fp)
     b2c:	18801526 	beq	r3,r2,b84 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     b30:	e0bffc17 	ldw	r2,-16(fp)
     b34:	10800037 	ldwio	r2,0(r2)
     b38:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     b3c:	e0bff917 	ldw	r2,-28(fp)
     b40:	10a0000c 	andi	r2,r2,32768
     b44:	10001126 	beq	r2,zero,b8c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     b48:	e0bffb17 	ldw	r2,-20(fp)
     b4c:	10800a17 	ldw	r2,40(r2)
     b50:	e0fff917 	ldw	r3,-28(fp)
     b54:	1809883a 	mov	r4,r3
     b58:	e0fffb17 	ldw	r3,-20(fp)
     b5c:	1885883a 	add	r2,r3,r2
     b60:	10800e04 	addi	r2,r2,56
     b64:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     b68:	e0bffb17 	ldw	r2,-20(fp)
     b6c:	10800a17 	ldw	r2,40(r2)
     b70:	10800044 	addi	r2,r2,1
     b74:	10c1ffcc 	andi	r3,r2,2047
     b78:	e0bffb17 	ldw	r2,-20(fp)
     b7c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
     b80:	003fe206 	br	b0c <__alt_data_end+0xfffe0b0c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
     b84:	0001883a 	nop
     b88:	00000106 	br	b90 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
     b8c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     b90:	e0bff917 	ldw	r2,-28(fp)
     b94:	10bfffec 	andhi	r2,r2,65535
     b98:	10000f26 	beq	r2,zero,bd8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     b9c:	e0bffb17 	ldw	r2,-20(fp)
     ba0:	10c00817 	ldw	r3,32(r2)
     ba4:	00bfff84 	movi	r2,-2
     ba8:	1886703a 	and	r3,r3,r2
     bac:	e0bffb17 	ldw	r2,-20(fp)
     bb0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     bb4:	e0bffc17 	ldw	r2,-16(fp)
     bb8:	10800104 	addi	r2,r2,4
     bbc:	1007883a 	mov	r3,r2
     bc0:	e0bffb17 	ldw	r2,-20(fp)
     bc4:	10800817 	ldw	r2,32(r2)
     bc8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     bcc:	e0bffc17 	ldw	r2,-16(fp)
     bd0:	10800104 	addi	r2,r2,4
     bd4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     bd8:	e0bffd17 	ldw	r2,-12(fp)
     bdc:	1080800c 	andi	r2,r2,512
     be0:	103fbe26 	beq	r2,zero,adc <__alt_data_end+0xfffe0adc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     be4:	e0bffd17 	ldw	r2,-12(fp)
     be8:	1004d43a 	srli	r2,r2,16
     bec:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
     bf0:	00001406 	br	c44 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     bf4:	e0bffc17 	ldw	r2,-16(fp)
     bf8:	e0fffb17 	ldw	r3,-20(fp)
     bfc:	18c00d17 	ldw	r3,52(r3)
     c00:	e13ffb17 	ldw	r4,-20(fp)
     c04:	20c7883a 	add	r3,r4,r3
     c08:	18c20e04 	addi	r3,r3,2104
     c0c:	18c00003 	ldbu	r3,0(r3)
     c10:	18c03fcc 	andi	r3,r3,255
     c14:	18c0201c 	xori	r3,r3,128
     c18:	18ffe004 	addi	r3,r3,-128
     c1c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     c20:	e0bffb17 	ldw	r2,-20(fp)
     c24:	10800d17 	ldw	r2,52(r2)
     c28:	10800044 	addi	r2,r2,1
     c2c:	10c1ffcc 	andi	r3,r2,2047
     c30:	e0bffb17 	ldw	r2,-20(fp)
     c34:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
     c38:	e0bffa17 	ldw	r2,-24(fp)
     c3c:	10bfffc4 	addi	r2,r2,-1
     c40:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
     c44:	e0bffa17 	ldw	r2,-24(fp)
     c48:	10000526 	beq	r2,zero,c60 <altera_avalon_jtag_uart_irq+0x1a8>
     c4c:	e0bffb17 	ldw	r2,-20(fp)
     c50:	10c00d17 	ldw	r3,52(r2)
     c54:	e0bffb17 	ldw	r2,-20(fp)
     c58:	10800c17 	ldw	r2,48(r2)
     c5c:	18bfe51e 	bne	r3,r2,bf4 <__alt_data_end+0xfffe0bf4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
     c60:	e0bffa17 	ldw	r2,-24(fp)
     c64:	103f9d26 	beq	r2,zero,adc <__alt_data_end+0xfffe0adc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     c68:	e0bffb17 	ldw	r2,-20(fp)
     c6c:	10c00817 	ldw	r3,32(r2)
     c70:	00bfff44 	movi	r2,-3
     c74:	1886703a 	and	r3,r3,r2
     c78:	e0bffb17 	ldw	r2,-20(fp)
     c7c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     c80:	e0bffb17 	ldw	r2,-20(fp)
     c84:	10800017 	ldw	r2,0(r2)
     c88:	10800104 	addi	r2,r2,4
     c8c:	1007883a 	mov	r3,r2
     c90:	e0bffb17 	ldw	r2,-20(fp)
     c94:	10800817 	ldw	r2,32(r2)
     c98:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     c9c:	e0bffc17 	ldw	r2,-16(fp)
     ca0:	10800104 	addi	r2,r2,4
     ca4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
     ca8:	003f8c06 	br	adc <__alt_data_end+0xfffe0adc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
     cac:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
     cb0:	0001883a 	nop
     cb4:	e037883a 	mov	sp,fp
     cb8:	df000017 	ldw	fp,0(sp)
     cbc:	dec00104 	addi	sp,sp,4
     cc0:	f800283a 	ret

00000cc4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
     cc4:	defff804 	addi	sp,sp,-32
     cc8:	df000715 	stw	fp,28(sp)
     ccc:	df000704 	addi	fp,sp,28
     cd0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
     cd4:	e0bffb17 	ldw	r2,-20(fp)
     cd8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     cdc:	e0bff917 	ldw	r2,-28(fp)
     ce0:	10800017 	ldw	r2,0(r2)
     ce4:	10800104 	addi	r2,r2,4
     ce8:	10800037 	ldwio	r2,0(r2)
     cec:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     cf0:	e0bffa17 	ldw	r2,-24(fp)
     cf4:	1081000c 	andi	r2,r2,1024
     cf8:	10000b26 	beq	r2,zero,d28 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     cfc:	e0bff917 	ldw	r2,-28(fp)
     d00:	10800017 	ldw	r2,0(r2)
     d04:	10800104 	addi	r2,r2,4
     d08:	1007883a 	mov	r3,r2
     d0c:	e0bff917 	ldw	r2,-28(fp)
     d10:	10800817 	ldw	r2,32(r2)
     d14:	10810014 	ori	r2,r2,1024
     d18:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
     d1c:	e0bff917 	ldw	r2,-28(fp)
     d20:	10000915 	stw	zero,36(r2)
     d24:	00000a06 	br	d50 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     d28:	e0bff917 	ldw	r2,-28(fp)
     d2c:	10c00917 	ldw	r3,36(r2)
     d30:	00a00034 	movhi	r2,32768
     d34:	10bfff04 	addi	r2,r2,-4
     d38:	10c00536 	bltu	r2,r3,d50 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
     d3c:	e0bff917 	ldw	r2,-28(fp)
     d40:	10800917 	ldw	r2,36(r2)
     d44:	10c00044 	addi	r3,r2,1
     d48:	e0bff917 	ldw	r2,-28(fp)
     d4c:	10c00915 	stw	r3,36(r2)
     d50:	d0a4d517 	ldw	r2,-27820(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     d54:	e037883a 	mov	sp,fp
     d58:	df000017 	ldw	fp,0(sp)
     d5c:	dec00104 	addi	sp,sp,4
     d60:	f800283a 	ret

00000d64 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
     d64:	defffd04 	addi	sp,sp,-12
     d68:	df000215 	stw	fp,8(sp)
     d6c:	df000204 	addi	fp,sp,8
     d70:	e13ffe15 	stw	r4,-8(fp)
     d74:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     d78:	00000506 	br	d90 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
     d7c:	e0bfff17 	ldw	r2,-4(fp)
     d80:	1090000c 	andi	r2,r2,16384
     d84:	10000226 	beq	r2,zero,d90 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
     d88:	00bffd44 	movi	r2,-11
     d8c:	00000b06 	br	dbc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     d90:	e0bffe17 	ldw	r2,-8(fp)
     d94:	10c00d17 	ldw	r3,52(r2)
     d98:	e0bffe17 	ldw	r2,-8(fp)
     d9c:	10800c17 	ldw	r2,48(r2)
     da0:	18800526 	beq	r3,r2,db8 <altera_avalon_jtag_uart_close+0x54>
     da4:	e0bffe17 	ldw	r2,-8(fp)
     da8:	10c00917 	ldw	r3,36(r2)
     dac:	e0bffe17 	ldw	r2,-8(fp)
     db0:	10800117 	ldw	r2,4(r2)
     db4:	18bff136 	bltu	r3,r2,d7c <__alt_data_end+0xfffe0d7c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
     db8:	0005883a 	mov	r2,zero
}
     dbc:	e037883a 	mov	sp,fp
     dc0:	df000017 	ldw	fp,0(sp)
     dc4:	dec00104 	addi	sp,sp,4
     dc8:	f800283a 	ret

00000dcc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
     dcc:	defffa04 	addi	sp,sp,-24
     dd0:	df000515 	stw	fp,20(sp)
     dd4:	df000504 	addi	fp,sp,20
     dd8:	e13ffd15 	stw	r4,-12(fp)
     ddc:	e17ffe15 	stw	r5,-8(fp)
     de0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
     de4:	00bff9c4 	movi	r2,-25
     de8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
     dec:	e0bffe17 	ldw	r2,-8(fp)
     df0:	10da8060 	cmpeqi	r3,r2,27137
     df4:	1800031e 	bne	r3,zero,e04 <altera_avalon_jtag_uart_ioctl+0x38>
     df8:	109a80a0 	cmpeqi	r2,r2,27138
     dfc:	1000181e 	bne	r2,zero,e60 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
     e00:	00002906 	br	ea8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
     e04:	e0bffd17 	ldw	r2,-12(fp)
     e08:	10c00117 	ldw	r3,4(r2)
     e0c:	00a00034 	movhi	r2,32768
     e10:	10bfffc4 	addi	r2,r2,-1
     e14:	18802126 	beq	r3,r2,e9c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
     e18:	e0bfff17 	ldw	r2,-4(fp)
     e1c:	10800017 	ldw	r2,0(r2)
     e20:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
     e24:	e0bffc17 	ldw	r2,-16(fp)
     e28:	10800090 	cmplti	r2,r2,2
     e2c:	1000061e 	bne	r2,zero,e48 <altera_avalon_jtag_uart_ioctl+0x7c>
     e30:	e0fffc17 	ldw	r3,-16(fp)
     e34:	00a00034 	movhi	r2,32768
     e38:	10bfffc4 	addi	r2,r2,-1
     e3c:	18800226 	beq	r3,r2,e48 <altera_avalon_jtag_uart_ioctl+0x7c>
     e40:	e0bffc17 	ldw	r2,-16(fp)
     e44:	00000206 	br	e50 <altera_avalon_jtag_uart_ioctl+0x84>
     e48:	00a00034 	movhi	r2,32768
     e4c:	10bfff84 	addi	r2,r2,-2
     e50:	e0fffd17 	ldw	r3,-12(fp)
     e54:	18800115 	stw	r2,4(r3)
      rc = 0;
     e58:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
     e5c:	00000f06 	br	e9c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
     e60:	e0bffd17 	ldw	r2,-12(fp)
     e64:	10c00117 	ldw	r3,4(r2)
     e68:	00a00034 	movhi	r2,32768
     e6c:	10bfffc4 	addi	r2,r2,-1
     e70:	18800c26 	beq	r3,r2,ea4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
     e74:	e0bffd17 	ldw	r2,-12(fp)
     e78:	10c00917 	ldw	r3,36(r2)
     e7c:	e0bffd17 	ldw	r2,-12(fp)
     e80:	10800117 	ldw	r2,4(r2)
     e84:	1885803a 	cmpltu	r2,r3,r2
     e88:	10c03fcc 	andi	r3,r2,255
     e8c:	e0bfff17 	ldw	r2,-4(fp)
     e90:	10c00015 	stw	r3,0(r2)
      rc = 0;
     e94:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
     e98:	00000206 	br	ea4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
     e9c:	0001883a 	nop
     ea0:	00000106 	br	ea8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
     ea4:	0001883a 	nop

  default:
    break;
  }

  return rc;
     ea8:	e0bffb17 	ldw	r2,-20(fp)
}
     eac:	e037883a 	mov	sp,fp
     eb0:	df000017 	ldw	fp,0(sp)
     eb4:	dec00104 	addi	sp,sp,4
     eb8:	f800283a 	ret

00000ebc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     ebc:	defff304 	addi	sp,sp,-52
     ec0:	dfc00c15 	stw	ra,48(sp)
     ec4:	df000b15 	stw	fp,44(sp)
     ec8:	df000b04 	addi	fp,sp,44
     ecc:	e13ffc15 	stw	r4,-16(fp)
     ed0:	e17ffd15 	stw	r5,-12(fp)
     ed4:	e1bffe15 	stw	r6,-8(fp)
     ed8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
     edc:	e0bffd17 	ldw	r2,-12(fp)
     ee0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     ee4:	00004706 	br	1004 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
     ee8:	e0bffc17 	ldw	r2,-16(fp)
     eec:	10800a17 	ldw	r2,40(r2)
     ef0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
     ef4:	e0bffc17 	ldw	r2,-16(fp)
     ef8:	10800b17 	ldw	r2,44(r2)
     efc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
     f00:	e0fff717 	ldw	r3,-36(fp)
     f04:	e0bff817 	ldw	r2,-32(fp)
     f08:	18800536 	bltu	r3,r2,f20 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
     f0c:	e0fff717 	ldw	r3,-36(fp)
     f10:	e0bff817 	ldw	r2,-32(fp)
     f14:	1885c83a 	sub	r2,r3,r2
     f18:	e0bff615 	stw	r2,-40(fp)
     f1c:	00000406 	br	f30 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     f20:	00c20004 	movi	r3,2048
     f24:	e0bff817 	ldw	r2,-32(fp)
     f28:	1885c83a 	sub	r2,r3,r2
     f2c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
     f30:	e0bff617 	ldw	r2,-40(fp)
     f34:	10001e26 	beq	r2,zero,fb0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
     f38:	e0fffe17 	ldw	r3,-8(fp)
     f3c:	e0bff617 	ldw	r2,-40(fp)
     f40:	1880022e 	bgeu	r3,r2,f4c <altera_avalon_jtag_uart_read+0x90>
        n = space;
     f44:	e0bffe17 	ldw	r2,-8(fp)
     f48:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
     f4c:	e0bffc17 	ldw	r2,-16(fp)
     f50:	10c00e04 	addi	r3,r2,56
     f54:	e0bff817 	ldw	r2,-32(fp)
     f58:	1885883a 	add	r2,r3,r2
     f5c:	e1bff617 	ldw	r6,-40(fp)
     f60:	100b883a 	mov	r5,r2
     f64:	e13ff517 	ldw	r4,-44(fp)
     f68:	00023940 	call	2394 <memcpy>
      ptr   += n;
     f6c:	e0fff517 	ldw	r3,-44(fp)
     f70:	e0bff617 	ldw	r2,-40(fp)
     f74:	1885883a 	add	r2,r3,r2
     f78:	e0bff515 	stw	r2,-44(fp)
      space -= n;
     f7c:	e0fffe17 	ldw	r3,-8(fp)
     f80:	e0bff617 	ldw	r2,-40(fp)
     f84:	1885c83a 	sub	r2,r3,r2
     f88:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     f8c:	e0fff817 	ldw	r3,-32(fp)
     f90:	e0bff617 	ldw	r2,-40(fp)
     f94:	1885883a 	add	r2,r3,r2
     f98:	10c1ffcc 	andi	r3,r2,2047
     f9c:	e0bffc17 	ldw	r2,-16(fp)
     fa0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
     fa4:	e0bffe17 	ldw	r2,-8(fp)
     fa8:	00bfcf16 	blt	zero,r2,ee8 <__alt_data_end+0xfffe0ee8>
     fac:	00000106 	br	fb4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
     fb0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
     fb4:	e0fff517 	ldw	r3,-44(fp)
     fb8:	e0bffd17 	ldw	r2,-12(fp)
     fbc:	1880141e 	bne	r3,r2,1010 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
     fc0:	e0bfff17 	ldw	r2,-4(fp)
     fc4:	1090000c 	andi	r2,r2,16384
     fc8:	1000131e 	bne	r2,zero,1018 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
     fcc:	0001883a 	nop
     fd0:	e0bffc17 	ldw	r2,-16(fp)
     fd4:	10c00a17 	ldw	r3,40(r2)
     fd8:	e0bff717 	ldw	r2,-36(fp)
     fdc:	1880051e 	bne	r3,r2,ff4 <altera_avalon_jtag_uart_read+0x138>
     fe0:	e0bffc17 	ldw	r2,-16(fp)
     fe4:	10c00917 	ldw	r3,36(r2)
     fe8:	e0bffc17 	ldw	r2,-16(fp)
     fec:	10800117 	ldw	r2,4(r2)
     ff0:	18bff736 	bltu	r3,r2,fd0 <__alt_data_end+0xfffe0fd0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
     ff4:	e0bffc17 	ldw	r2,-16(fp)
     ff8:	10c00a17 	ldw	r3,40(r2)
     ffc:	e0bff717 	ldw	r2,-36(fp)
    1000:	18800726 	beq	r3,r2,1020 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1004:	e0bffe17 	ldw	r2,-8(fp)
    1008:	00bfb716 	blt	zero,r2,ee8 <__alt_data_end+0xfffe0ee8>
    100c:	00000506 	br	1024 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    1010:	0001883a 	nop
    1014:	00000306 	br	1024 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    1018:	0001883a 	nop
    101c:	00000106 	br	1024 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    1020:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    1024:	e0fff517 	ldw	r3,-44(fp)
    1028:	e0bffd17 	ldw	r2,-12(fp)
    102c:	18801826 	beq	r3,r2,1090 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1030:	0005303a 	rdctl	r2,status
    1034:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1038:	e0fffb17 	ldw	r3,-20(fp)
    103c:	00bfff84 	movi	r2,-2
    1040:	1884703a 	and	r2,r3,r2
    1044:	1001703a 	wrctl	status,r2
  
  return context;
    1048:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    104c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1050:	e0bffc17 	ldw	r2,-16(fp)
    1054:	10800817 	ldw	r2,32(r2)
    1058:	10c00054 	ori	r3,r2,1
    105c:	e0bffc17 	ldw	r2,-16(fp)
    1060:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1064:	e0bffc17 	ldw	r2,-16(fp)
    1068:	10800017 	ldw	r2,0(r2)
    106c:	10800104 	addi	r2,r2,4
    1070:	1007883a 	mov	r3,r2
    1074:	e0bffc17 	ldw	r2,-16(fp)
    1078:	10800817 	ldw	r2,32(r2)
    107c:	18800035 	stwio	r2,0(r3)
    1080:	e0bffa17 	ldw	r2,-24(fp)
    1084:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1088:	e0bff917 	ldw	r2,-28(fp)
    108c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    1090:	e0fff517 	ldw	r3,-44(fp)
    1094:	e0bffd17 	ldw	r2,-12(fp)
    1098:	18800426 	beq	r3,r2,10ac <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    109c:	e0fff517 	ldw	r3,-44(fp)
    10a0:	e0bffd17 	ldw	r2,-12(fp)
    10a4:	1885c83a 	sub	r2,r3,r2
    10a8:	00000606 	br	10c4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    10ac:	e0bfff17 	ldw	r2,-4(fp)
    10b0:	1090000c 	andi	r2,r2,16384
    10b4:	10000226 	beq	r2,zero,10c0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    10b8:	00bffd44 	movi	r2,-11
    10bc:	00000106 	br	10c4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    10c0:	00bffec4 	movi	r2,-5
}
    10c4:	e037883a 	mov	sp,fp
    10c8:	dfc00117 	ldw	ra,4(sp)
    10cc:	df000017 	ldw	fp,0(sp)
    10d0:	dec00204 	addi	sp,sp,8
    10d4:	f800283a 	ret

000010d8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    10d8:	defff304 	addi	sp,sp,-52
    10dc:	dfc00c15 	stw	ra,48(sp)
    10e0:	df000b15 	stw	fp,44(sp)
    10e4:	df000b04 	addi	fp,sp,44
    10e8:	e13ffc15 	stw	r4,-16(fp)
    10ec:	e17ffd15 	stw	r5,-12(fp)
    10f0:	e1bffe15 	stw	r6,-8(fp)
    10f4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    10f8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    10fc:	e0bffd17 	ldw	r2,-12(fp)
    1100:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1104:	00003706 	br	11e4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    1108:	e0bffc17 	ldw	r2,-16(fp)
    110c:	10800c17 	ldw	r2,48(r2)
    1110:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    1114:	e0bffc17 	ldw	r2,-16(fp)
    1118:	10800d17 	ldw	r2,52(r2)
    111c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    1120:	e0fff917 	ldw	r3,-28(fp)
    1124:	e0bff517 	ldw	r2,-44(fp)
    1128:	1880062e 	bgeu	r3,r2,1144 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    112c:	e0fff517 	ldw	r3,-44(fp)
    1130:	e0bff917 	ldw	r2,-28(fp)
    1134:	1885c83a 	sub	r2,r3,r2
    1138:	10bfffc4 	addi	r2,r2,-1
    113c:	e0bff615 	stw	r2,-40(fp)
    1140:	00000b06 	br	1170 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    1144:	e0bff517 	ldw	r2,-44(fp)
    1148:	10000526 	beq	r2,zero,1160 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    114c:	00c20004 	movi	r3,2048
    1150:	e0bff917 	ldw	r2,-28(fp)
    1154:	1885c83a 	sub	r2,r3,r2
    1158:	e0bff615 	stw	r2,-40(fp)
    115c:	00000406 	br	1170 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    1160:	00c1ffc4 	movi	r3,2047
    1164:	e0bff917 	ldw	r2,-28(fp)
    1168:	1885c83a 	sub	r2,r3,r2
    116c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    1170:	e0bff617 	ldw	r2,-40(fp)
    1174:	10001e26 	beq	r2,zero,11f0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    1178:	e0fffe17 	ldw	r3,-8(fp)
    117c:	e0bff617 	ldw	r2,-40(fp)
    1180:	1880022e 	bgeu	r3,r2,118c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    1184:	e0bffe17 	ldw	r2,-8(fp)
    1188:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    118c:	e0bffc17 	ldw	r2,-16(fp)
    1190:	10c20e04 	addi	r3,r2,2104
    1194:	e0bff917 	ldw	r2,-28(fp)
    1198:	1885883a 	add	r2,r3,r2
    119c:	e1bff617 	ldw	r6,-40(fp)
    11a0:	e17ffd17 	ldw	r5,-12(fp)
    11a4:	1009883a 	mov	r4,r2
    11a8:	00023940 	call	2394 <memcpy>
      ptr   += n;
    11ac:	e0fffd17 	ldw	r3,-12(fp)
    11b0:	e0bff617 	ldw	r2,-40(fp)
    11b4:	1885883a 	add	r2,r3,r2
    11b8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    11bc:	e0fffe17 	ldw	r3,-8(fp)
    11c0:	e0bff617 	ldw	r2,-40(fp)
    11c4:	1885c83a 	sub	r2,r3,r2
    11c8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    11cc:	e0fff917 	ldw	r3,-28(fp)
    11d0:	e0bff617 	ldw	r2,-40(fp)
    11d4:	1885883a 	add	r2,r3,r2
    11d8:	10c1ffcc 	andi	r3,r2,2047
    11dc:	e0bffc17 	ldw	r2,-16(fp)
    11e0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    11e4:	e0bffe17 	ldw	r2,-8(fp)
    11e8:	00bfc716 	blt	zero,r2,1108 <__alt_data_end+0xfffe1108>
    11ec:	00000106 	br	11f4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    11f0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    11f4:	0005303a 	rdctl	r2,status
    11f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    11fc:	e0fffb17 	ldw	r3,-20(fp)
    1200:	00bfff84 	movi	r2,-2
    1204:	1884703a 	and	r2,r3,r2
    1208:	1001703a 	wrctl	status,r2
  
  return context;
    120c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    1210:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1214:	e0bffc17 	ldw	r2,-16(fp)
    1218:	10800817 	ldw	r2,32(r2)
    121c:	10c00094 	ori	r3,r2,2
    1220:	e0bffc17 	ldw	r2,-16(fp)
    1224:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1228:	e0bffc17 	ldw	r2,-16(fp)
    122c:	10800017 	ldw	r2,0(r2)
    1230:	10800104 	addi	r2,r2,4
    1234:	1007883a 	mov	r3,r2
    1238:	e0bffc17 	ldw	r2,-16(fp)
    123c:	10800817 	ldw	r2,32(r2)
    1240:	18800035 	stwio	r2,0(r3)
    1244:	e0bffa17 	ldw	r2,-24(fp)
    1248:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    124c:	e0bff817 	ldw	r2,-32(fp)
    1250:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    1254:	e0bffe17 	ldw	r2,-8(fp)
    1258:	0080100e 	bge	zero,r2,129c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    125c:	e0bfff17 	ldw	r2,-4(fp)
    1260:	1090000c 	andi	r2,r2,16384
    1264:	1000101e 	bne	r2,zero,12a8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    1268:	0001883a 	nop
    126c:	e0bffc17 	ldw	r2,-16(fp)
    1270:	10c00d17 	ldw	r3,52(r2)
    1274:	e0bff517 	ldw	r2,-44(fp)
    1278:	1880051e 	bne	r3,r2,1290 <altera_avalon_jtag_uart_write+0x1b8>
    127c:	e0bffc17 	ldw	r2,-16(fp)
    1280:	10c00917 	ldw	r3,36(r2)
    1284:	e0bffc17 	ldw	r2,-16(fp)
    1288:	10800117 	ldw	r2,4(r2)
    128c:	18bff736 	bltu	r3,r2,126c <__alt_data_end+0xfffe126c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    1290:	e0bffc17 	ldw	r2,-16(fp)
    1294:	10800917 	ldw	r2,36(r2)
    1298:	1000051e 	bne	r2,zero,12b0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    129c:	e0bffe17 	ldw	r2,-8(fp)
    12a0:	00bfd016 	blt	zero,r2,11e4 <__alt_data_end+0xfffe11e4>
    12a4:	00000306 	br	12b4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    12a8:	0001883a 	nop
    12ac:	00000106 	br	12b4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    12b0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    12b4:	e0fffd17 	ldw	r3,-12(fp)
    12b8:	e0bff717 	ldw	r2,-36(fp)
    12bc:	18800426 	beq	r3,r2,12d0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    12c0:	e0fffd17 	ldw	r3,-12(fp)
    12c4:	e0bff717 	ldw	r2,-36(fp)
    12c8:	1885c83a 	sub	r2,r3,r2
    12cc:	00000606 	br	12e8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    12d0:	e0bfff17 	ldw	r2,-4(fp)
    12d4:	1090000c 	andi	r2,r2,16384
    12d8:	10000226 	beq	r2,zero,12e4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    12dc:	00bffd44 	movi	r2,-11
    12e0:	00000106 	br	12e8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    12e4:	00bffec4 	movi	r2,-5
}
    12e8:	e037883a 	mov	sp,fp
    12ec:	dfc00117 	ldw	ra,4(sp)
    12f0:	df000017 	ldw	fp,0(sp)
    12f4:	dec00204 	addi	sp,sp,8
    12f8:	f800283a 	ret

000012fc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    12fc:	defffa04 	addi	sp,sp,-24
    1300:	dfc00515 	stw	ra,20(sp)
    1304:	df000415 	stw	fp,16(sp)
    1308:	df000404 	addi	fp,sp,16
    130c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    1310:	0007883a 	mov	r3,zero
    1314:	e0bfff17 	ldw	r2,-4(fp)
    1318:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    131c:	e0bfff17 	ldw	r2,-4(fp)
    1320:	10800104 	addi	r2,r2,4
    1324:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1328:	0005303a 	rdctl	r2,status
    132c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1330:	e0fffd17 	ldw	r3,-12(fp)
    1334:	00bfff84 	movi	r2,-2
    1338:	1884703a 	and	r2,r3,r2
    133c:	1001703a 	wrctl	status,r2
  
  return context;
    1340:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    1344:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    1348:	0001f200 	call	1f20 <alt_tick>
    134c:	e0bffc17 	ldw	r2,-16(fp)
    1350:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1354:	e0bffe17 	ldw	r2,-8(fp)
    1358:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    135c:	0001883a 	nop
    1360:	e037883a 	mov	sp,fp
    1364:	dfc00117 	ldw	ra,4(sp)
    1368:	df000017 	ldw	fp,0(sp)
    136c:	dec00204 	addi	sp,sp,8
    1370:	f800283a 	ret

00001374 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    1374:	defff804 	addi	sp,sp,-32
    1378:	dfc00715 	stw	ra,28(sp)
    137c:	df000615 	stw	fp,24(sp)
    1380:	df000604 	addi	fp,sp,24
    1384:	e13ffc15 	stw	r4,-16(fp)
    1388:	e17ffd15 	stw	r5,-12(fp)
    138c:	e1bffe15 	stw	r6,-8(fp)
    1390:	e1ffff15 	stw	r7,-4(fp)
    1394:	e0bfff17 	ldw	r2,-4(fp)
    1398:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    139c:	d0a4d517 	ldw	r2,-27820(gp)
    13a0:	1000021e 	bne	r2,zero,13ac <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    13a4:	e0bffb17 	ldw	r2,-20(fp)
    13a8:	d0a4d515 	stw	r2,-27820(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    13ac:	e0bffc17 	ldw	r2,-16(fp)
    13b0:	10800104 	addi	r2,r2,4
    13b4:	00c001c4 	movi	r3,7
    13b8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    13bc:	d8000015 	stw	zero,0(sp)
    13c0:	e1fffc17 	ldw	r7,-16(fp)
    13c4:	01800034 	movhi	r6,0
    13c8:	3184bf04 	addi	r6,r6,4860
    13cc:	e17ffe17 	ldw	r5,-8(fp)
    13d0:	e13ffd17 	ldw	r4,-12(fp)
    13d4:	000177c0 	call	177c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    13d8:	0001883a 	nop
    13dc:	e037883a 	mov	sp,fp
    13e0:	dfc00117 	ldw	ra,4(sp)
    13e4:	df000017 	ldw	fp,0(sp)
    13e8:	dec00204 	addi	sp,sp,8
    13ec:	f800283a 	ret

000013f0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    13f0:	defff504 	addi	sp,sp,-44
    13f4:	df000a15 	stw	fp,40(sp)
    13f8:	df000a04 	addi	fp,sp,40
    13fc:	e13ffc15 	stw	r4,-16(fp)
    1400:	e17ffd15 	stw	r5,-12(fp)
    1404:	e1bffe15 	stw	r6,-8(fp)
    1408:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    140c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1410:	d0a4d517 	ldw	r2,-27820(gp)
  
  if (alt_ticks_per_second ())
    1414:	10003c26 	beq	r2,zero,1508 <alt_alarm_start+0x118>
  {
    if (alarm)
    1418:	e0bffc17 	ldw	r2,-16(fp)
    141c:	10003826 	beq	r2,zero,1500 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    1420:	e0bffc17 	ldw	r2,-16(fp)
    1424:	e0fffe17 	ldw	r3,-8(fp)
    1428:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    142c:	e0bffc17 	ldw	r2,-16(fp)
    1430:	e0ffff17 	ldw	r3,-4(fp)
    1434:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1438:	0005303a 	rdctl	r2,status
    143c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1440:	e0fff917 	ldw	r3,-28(fp)
    1444:	00bfff84 	movi	r2,-2
    1448:	1884703a 	and	r2,r3,r2
    144c:	1001703a 	wrctl	status,r2
  
  return context;
    1450:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    1454:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    1458:	d0a4d617 	ldw	r2,-27816(gp)
      
      current_nticks = alt_nticks();
    145c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    1460:	e0fffd17 	ldw	r3,-12(fp)
    1464:	e0bff617 	ldw	r2,-40(fp)
    1468:	1885883a 	add	r2,r3,r2
    146c:	10c00044 	addi	r3,r2,1
    1470:	e0bffc17 	ldw	r2,-16(fp)
    1474:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    1478:	e0bffc17 	ldw	r2,-16(fp)
    147c:	10c00217 	ldw	r3,8(r2)
    1480:	e0bff617 	ldw	r2,-40(fp)
    1484:	1880042e 	bgeu	r3,r2,1498 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    1488:	e0bffc17 	ldw	r2,-16(fp)
    148c:	00c00044 	movi	r3,1
    1490:	10c00405 	stb	r3,16(r2)
    1494:	00000206 	br	14a0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    1498:	e0bffc17 	ldw	r2,-16(fp)
    149c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    14a0:	e0bffc17 	ldw	r2,-16(fp)
    14a4:	d0e00904 	addi	r3,gp,-32732
    14a8:	e0fffa15 	stw	r3,-24(fp)
    14ac:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    14b0:	e0bffb17 	ldw	r2,-20(fp)
    14b4:	e0fffa17 	ldw	r3,-24(fp)
    14b8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    14bc:	e0bffa17 	ldw	r2,-24(fp)
    14c0:	10c00017 	ldw	r3,0(r2)
    14c4:	e0bffb17 	ldw	r2,-20(fp)
    14c8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    14cc:	e0bffa17 	ldw	r2,-24(fp)
    14d0:	10800017 	ldw	r2,0(r2)
    14d4:	e0fffb17 	ldw	r3,-20(fp)
    14d8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    14dc:	e0bffa17 	ldw	r2,-24(fp)
    14e0:	e0fffb17 	ldw	r3,-20(fp)
    14e4:	10c00015 	stw	r3,0(r2)
    14e8:	e0bff817 	ldw	r2,-32(fp)
    14ec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    14f0:	e0bff717 	ldw	r2,-36(fp)
    14f4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    14f8:	0005883a 	mov	r2,zero
    14fc:	00000306 	br	150c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    1500:	00bffa84 	movi	r2,-22
    1504:	00000106 	br	150c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    1508:	00bfde84 	movi	r2,-134
  }
}
    150c:	e037883a 	mov	sp,fp
    1510:	df000017 	ldw	fp,0(sp)
    1514:	dec00104 	addi	sp,sp,4
    1518:	f800283a 	ret

0000151c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    151c:	defffe04 	addi	sp,sp,-8
    1520:	dfc00115 	stw	ra,4(sp)
    1524:	df000015 	stw	fp,0(sp)
    1528:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    152c:	d0a00717 	ldw	r2,-32740(gp)
    1530:	10000326 	beq	r2,zero,1540 <alt_get_errno+0x24>
    1534:	d0a00717 	ldw	r2,-32740(gp)
    1538:	103ee83a 	callr	r2
    153c:	00000106 	br	1544 <alt_get_errno+0x28>
    1540:	d0a4d004 	addi	r2,gp,-27840
}
    1544:	e037883a 	mov	sp,fp
    1548:	dfc00117 	ldw	ra,4(sp)
    154c:	df000017 	ldw	fp,0(sp)
    1550:	dec00204 	addi	sp,sp,8
    1554:	f800283a 	ret

00001558 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    1558:	defffb04 	addi	sp,sp,-20
    155c:	dfc00415 	stw	ra,16(sp)
    1560:	df000315 	stw	fp,12(sp)
    1564:	df000304 	addi	fp,sp,12
    1568:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    156c:	e0bfff17 	ldw	r2,-4(fp)
    1570:	10000816 	blt	r2,zero,1594 <close+0x3c>
    1574:	01400304 	movi	r5,12
    1578:	e13fff17 	ldw	r4,-4(fp)
    157c:	000254c0 	call	254c <__mulsi3>
    1580:	1007883a 	mov	r3,r2
    1584:	00800034 	movhi	r2,0
    1588:	108dd604 	addi	r2,r2,14168
    158c:	1885883a 	add	r2,r3,r2
    1590:	00000106 	br	1598 <close+0x40>
    1594:	0005883a 	mov	r2,zero
    1598:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    159c:	e0bffd17 	ldw	r2,-12(fp)
    15a0:	10001926 	beq	r2,zero,1608 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    15a4:	e0bffd17 	ldw	r2,-12(fp)
    15a8:	10800017 	ldw	r2,0(r2)
    15ac:	10800417 	ldw	r2,16(r2)
    15b0:	10000626 	beq	r2,zero,15cc <close+0x74>
    15b4:	e0bffd17 	ldw	r2,-12(fp)
    15b8:	10800017 	ldw	r2,0(r2)
    15bc:	10800417 	ldw	r2,16(r2)
    15c0:	e13ffd17 	ldw	r4,-12(fp)
    15c4:	103ee83a 	callr	r2
    15c8:	00000106 	br	15d0 <close+0x78>
    15cc:	0005883a 	mov	r2,zero
    15d0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    15d4:	e13fff17 	ldw	r4,-4(fp)
    15d8:	0001e000 	call	1e00 <alt_release_fd>
    if (rval < 0)
    15dc:	e0bffe17 	ldw	r2,-8(fp)
    15e0:	1000070e 	bge	r2,zero,1600 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    15e4:	000151c0 	call	151c <alt_get_errno>
    15e8:	1007883a 	mov	r3,r2
    15ec:	e0bffe17 	ldw	r2,-8(fp)
    15f0:	0085c83a 	sub	r2,zero,r2
    15f4:	18800015 	stw	r2,0(r3)
      return -1;
    15f8:	00bfffc4 	movi	r2,-1
    15fc:	00000706 	br	161c <close+0xc4>
    }
    return 0;
    1600:	0005883a 	mov	r2,zero
    1604:	00000506 	br	161c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    1608:	000151c0 	call	151c <alt_get_errno>
    160c:	1007883a 	mov	r3,r2
    1610:	00801444 	movi	r2,81
    1614:	18800015 	stw	r2,0(r3)
    return -1;
    1618:	00bfffc4 	movi	r2,-1
  }
}
    161c:	e037883a 	mov	sp,fp
    1620:	dfc00117 	ldw	ra,4(sp)
    1624:	df000017 	ldw	fp,0(sp)
    1628:	dec00204 	addi	sp,sp,8
    162c:	f800283a 	ret

00001630 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1630:	deffff04 	addi	sp,sp,-4
    1634:	df000015 	stw	fp,0(sp)
    1638:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    163c:	0001883a 	nop
    1640:	e037883a 	mov	sp,fp
    1644:	df000017 	ldw	fp,0(sp)
    1648:	dec00104 	addi	sp,sp,4
    164c:	f800283a 	ret

00001650 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    1650:	defffc04 	addi	sp,sp,-16
    1654:	df000315 	stw	fp,12(sp)
    1658:	df000304 	addi	fp,sp,12
    165c:	e13ffd15 	stw	r4,-12(fp)
    1660:	e17ffe15 	stw	r5,-8(fp)
    1664:	e1bfff15 	stw	r6,-4(fp)
  return len;
    1668:	e0bfff17 	ldw	r2,-4(fp)
}
    166c:	e037883a 	mov	sp,fp
    1670:	df000017 	ldw	fp,0(sp)
    1674:	dec00104 	addi	sp,sp,4
    1678:	f800283a 	ret

0000167c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    167c:	defffe04 	addi	sp,sp,-8
    1680:	dfc00115 	stw	ra,4(sp)
    1684:	df000015 	stw	fp,0(sp)
    1688:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    168c:	d0a00717 	ldw	r2,-32740(gp)
    1690:	10000326 	beq	r2,zero,16a0 <alt_get_errno+0x24>
    1694:	d0a00717 	ldw	r2,-32740(gp)
    1698:	103ee83a 	callr	r2
    169c:	00000106 	br	16a4 <alt_get_errno+0x28>
    16a0:	d0a4d004 	addi	r2,gp,-27840
}
    16a4:	e037883a 	mov	sp,fp
    16a8:	dfc00117 	ldw	ra,4(sp)
    16ac:	df000017 	ldw	fp,0(sp)
    16b0:	dec00204 	addi	sp,sp,8
    16b4:	f800283a 	ret

000016b8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    16b8:	defffa04 	addi	sp,sp,-24
    16bc:	dfc00515 	stw	ra,20(sp)
    16c0:	df000415 	stw	fp,16(sp)
    16c4:	df000404 	addi	fp,sp,16
    16c8:	e13ffe15 	stw	r4,-8(fp)
    16cc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    16d0:	e0bffe17 	ldw	r2,-8(fp)
    16d4:	10000326 	beq	r2,zero,16e4 <alt_dev_llist_insert+0x2c>
    16d8:	e0bffe17 	ldw	r2,-8(fp)
    16dc:	10800217 	ldw	r2,8(r2)
    16e0:	1000061e 	bne	r2,zero,16fc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    16e4:	000167c0 	call	167c <alt_get_errno>
    16e8:	1007883a 	mov	r3,r2
    16ec:	00800584 	movi	r2,22
    16f0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    16f4:	00bffa84 	movi	r2,-22
    16f8:	00001306 	br	1748 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    16fc:	e0bffe17 	ldw	r2,-8(fp)
    1700:	e0ffff17 	ldw	r3,-4(fp)
    1704:	e0fffc15 	stw	r3,-16(fp)
    1708:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    170c:	e0bffd17 	ldw	r2,-12(fp)
    1710:	e0fffc17 	ldw	r3,-16(fp)
    1714:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    1718:	e0bffc17 	ldw	r2,-16(fp)
    171c:	10c00017 	ldw	r3,0(r2)
    1720:	e0bffd17 	ldw	r2,-12(fp)
    1724:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1728:	e0bffc17 	ldw	r2,-16(fp)
    172c:	10800017 	ldw	r2,0(r2)
    1730:	e0fffd17 	ldw	r3,-12(fp)
    1734:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    1738:	e0bffc17 	ldw	r2,-16(fp)
    173c:	e0fffd17 	ldw	r3,-12(fp)
    1740:	10c00015 	stw	r3,0(r2)

  return 0;  
    1744:	0005883a 	mov	r2,zero
}
    1748:	e037883a 	mov	sp,fp
    174c:	dfc00117 	ldw	ra,4(sp)
    1750:	df000017 	ldw	fp,0(sp)
    1754:	dec00204 	addi	sp,sp,8
    1758:	f800283a 	ret

0000175c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    175c:	deffff04 	addi	sp,sp,-4
    1760:	df000015 	stw	fp,0(sp)
    1764:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    1768:	0001883a 	nop
    176c:	e037883a 	mov	sp,fp
    1770:	df000017 	ldw	fp,0(sp)
    1774:	dec00104 	addi	sp,sp,4
    1778:	f800283a 	ret

0000177c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    177c:	defff904 	addi	sp,sp,-28
    1780:	dfc00615 	stw	ra,24(sp)
    1784:	df000515 	stw	fp,20(sp)
    1788:	df000504 	addi	fp,sp,20
    178c:	e13ffc15 	stw	r4,-16(fp)
    1790:	e17ffd15 	stw	r5,-12(fp)
    1794:	e1bffe15 	stw	r6,-8(fp)
    1798:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    179c:	e0800217 	ldw	r2,8(fp)
    17a0:	d8800015 	stw	r2,0(sp)
    17a4:	e1ffff17 	ldw	r7,-4(fp)
    17a8:	e1bffe17 	ldw	r6,-8(fp)
    17ac:	e17ffd17 	ldw	r5,-12(fp)
    17b0:	e13ffc17 	ldw	r4,-16(fp)
    17b4:	000192c0 	call	192c <alt_iic_isr_register>
}  
    17b8:	e037883a 	mov	sp,fp
    17bc:	dfc00117 	ldw	ra,4(sp)
    17c0:	df000017 	ldw	fp,0(sp)
    17c4:	dec00204 	addi	sp,sp,8
    17c8:	f800283a 	ret

000017cc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    17cc:	defff904 	addi	sp,sp,-28
    17d0:	df000615 	stw	fp,24(sp)
    17d4:	df000604 	addi	fp,sp,24
    17d8:	e13ffe15 	stw	r4,-8(fp)
    17dc:	e17fff15 	stw	r5,-4(fp)
    17e0:	e0bfff17 	ldw	r2,-4(fp)
    17e4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    17e8:	0005303a 	rdctl	r2,status
    17ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    17f0:	e0fffb17 	ldw	r3,-20(fp)
    17f4:	00bfff84 	movi	r2,-2
    17f8:	1884703a 	and	r2,r3,r2
    17fc:	1001703a 	wrctl	status,r2
  
  return context;
    1800:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1804:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    1808:	00c00044 	movi	r3,1
    180c:	e0bffa17 	ldw	r2,-24(fp)
    1810:	1884983a 	sll	r2,r3,r2
    1814:	1007883a 	mov	r3,r2
    1818:	d0a4d417 	ldw	r2,-27824(gp)
    181c:	1884b03a 	or	r2,r3,r2
    1820:	d0a4d415 	stw	r2,-27824(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1824:	d0a4d417 	ldw	r2,-27824(gp)
    1828:	100170fa 	wrctl	ienable,r2
    182c:	e0bffc17 	ldw	r2,-16(fp)
    1830:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1834:	e0bffd17 	ldw	r2,-12(fp)
    1838:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    183c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    1840:	0001883a 	nop
}
    1844:	e037883a 	mov	sp,fp
    1848:	df000017 	ldw	fp,0(sp)
    184c:	dec00104 	addi	sp,sp,4
    1850:	f800283a 	ret

00001854 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    1854:	defff904 	addi	sp,sp,-28
    1858:	df000615 	stw	fp,24(sp)
    185c:	df000604 	addi	fp,sp,24
    1860:	e13ffe15 	stw	r4,-8(fp)
    1864:	e17fff15 	stw	r5,-4(fp)
    1868:	e0bfff17 	ldw	r2,-4(fp)
    186c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1870:	0005303a 	rdctl	r2,status
    1874:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1878:	e0fffb17 	ldw	r3,-20(fp)
    187c:	00bfff84 	movi	r2,-2
    1880:	1884703a 	and	r2,r3,r2
    1884:	1001703a 	wrctl	status,r2
  
  return context;
    1888:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    188c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    1890:	00c00044 	movi	r3,1
    1894:	e0bffa17 	ldw	r2,-24(fp)
    1898:	1884983a 	sll	r2,r3,r2
    189c:	0084303a 	nor	r2,zero,r2
    18a0:	1007883a 	mov	r3,r2
    18a4:	d0a4d417 	ldw	r2,-27824(gp)
    18a8:	1884703a 	and	r2,r3,r2
    18ac:	d0a4d415 	stw	r2,-27824(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    18b0:	d0a4d417 	ldw	r2,-27824(gp)
    18b4:	100170fa 	wrctl	ienable,r2
    18b8:	e0bffc17 	ldw	r2,-16(fp)
    18bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    18c0:	e0bffd17 	ldw	r2,-12(fp)
    18c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    18c8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    18cc:	0001883a 	nop
}
    18d0:	e037883a 	mov	sp,fp
    18d4:	df000017 	ldw	fp,0(sp)
    18d8:	dec00104 	addi	sp,sp,4
    18dc:	f800283a 	ret

000018e0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    18e0:	defffc04 	addi	sp,sp,-16
    18e4:	df000315 	stw	fp,12(sp)
    18e8:	df000304 	addi	fp,sp,12
    18ec:	e13ffe15 	stw	r4,-8(fp)
    18f0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    18f4:	000530fa 	rdctl	r2,ienable
    18f8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    18fc:	00c00044 	movi	r3,1
    1900:	e0bfff17 	ldw	r2,-4(fp)
    1904:	1884983a 	sll	r2,r3,r2
    1908:	1007883a 	mov	r3,r2
    190c:	e0bffd17 	ldw	r2,-12(fp)
    1910:	1884703a 	and	r2,r3,r2
    1914:	1004c03a 	cmpne	r2,r2,zero
    1918:	10803fcc 	andi	r2,r2,255
}
    191c:	e037883a 	mov	sp,fp
    1920:	df000017 	ldw	fp,0(sp)
    1924:	dec00104 	addi	sp,sp,4
    1928:	f800283a 	ret

0000192c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    192c:	defff504 	addi	sp,sp,-44
    1930:	dfc00a15 	stw	ra,40(sp)
    1934:	df000915 	stw	fp,36(sp)
    1938:	df000904 	addi	fp,sp,36
    193c:	e13ffc15 	stw	r4,-16(fp)
    1940:	e17ffd15 	stw	r5,-12(fp)
    1944:	e1bffe15 	stw	r6,-8(fp)
    1948:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    194c:	00bffa84 	movi	r2,-22
    1950:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    1954:	e0bffd17 	ldw	r2,-12(fp)
    1958:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    195c:	e0bff817 	ldw	r2,-32(fp)
    1960:	10800808 	cmpgei	r2,r2,32
    1964:	1000271e 	bne	r2,zero,1a04 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1968:	0005303a 	rdctl	r2,status
    196c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1970:	e0fffb17 	ldw	r3,-20(fp)
    1974:	00bfff84 	movi	r2,-2
    1978:	1884703a 	and	r2,r3,r2
    197c:	1001703a 	wrctl	status,r2
  
  return context;
    1980:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    1984:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    1988:	00800034 	movhi	r2,0
    198c:	10930e04 	addi	r2,r2,19512
    1990:	e0fff817 	ldw	r3,-32(fp)
    1994:	180690fa 	slli	r3,r3,3
    1998:	10c5883a 	add	r2,r2,r3
    199c:	e0fffe17 	ldw	r3,-8(fp)
    19a0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    19a4:	00800034 	movhi	r2,0
    19a8:	10930e04 	addi	r2,r2,19512
    19ac:	e0fff817 	ldw	r3,-32(fp)
    19b0:	180690fa 	slli	r3,r3,3
    19b4:	10c5883a 	add	r2,r2,r3
    19b8:	10800104 	addi	r2,r2,4
    19bc:	e0ffff17 	ldw	r3,-4(fp)
    19c0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    19c4:	e0bffe17 	ldw	r2,-8(fp)
    19c8:	10000526 	beq	r2,zero,19e0 <alt_iic_isr_register+0xb4>
    19cc:	e0bff817 	ldw	r2,-32(fp)
    19d0:	100b883a 	mov	r5,r2
    19d4:	e13ffc17 	ldw	r4,-16(fp)
    19d8:	00017cc0 	call	17cc <alt_ic_irq_enable>
    19dc:	00000406 	br	19f0 <alt_iic_isr_register+0xc4>
    19e0:	e0bff817 	ldw	r2,-32(fp)
    19e4:	100b883a 	mov	r5,r2
    19e8:	e13ffc17 	ldw	r4,-16(fp)
    19ec:	00018540 	call	1854 <alt_ic_irq_disable>
    19f0:	e0bff715 	stw	r2,-36(fp)
    19f4:	e0bffa17 	ldw	r2,-24(fp)
    19f8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    19fc:	e0bff917 	ldw	r2,-28(fp)
    1a00:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    1a04:	e0bff717 	ldw	r2,-36(fp)
}
    1a08:	e037883a 	mov	sp,fp
    1a0c:	dfc00117 	ldw	ra,4(sp)
    1a10:	df000017 	ldw	fp,0(sp)
    1a14:	dec00204 	addi	sp,sp,8
    1a18:	f800283a 	ret

00001a1c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    1a1c:	defff804 	addi	sp,sp,-32
    1a20:	dfc00715 	stw	ra,28(sp)
    1a24:	df000615 	stw	fp,24(sp)
    1a28:	dc000515 	stw	r16,20(sp)
    1a2c:	df000604 	addi	fp,sp,24
    1a30:	e13ffb15 	stw	r4,-20(fp)
    1a34:	e17ffc15 	stw	r5,-16(fp)
    1a38:	e1bffd15 	stw	r6,-12(fp)
    1a3c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    1a40:	e1bffe17 	ldw	r6,-8(fp)
    1a44:	e17ffd17 	ldw	r5,-12(fp)
    1a48:	e13ffc17 	ldw	r4,-16(fp)
    1a4c:	0001ca40 	call	1ca4 <open>
    1a50:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    1a54:	e0bffa17 	ldw	r2,-24(fp)
    1a58:	10002216 	blt	r2,zero,1ae4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    1a5c:	04000034 	movhi	r16,0
    1a60:	840dd604 	addi	r16,r16,14168
    1a64:	e0bffa17 	ldw	r2,-24(fp)
    1a68:	01400304 	movi	r5,12
    1a6c:	1009883a 	mov	r4,r2
    1a70:	000254c0 	call	254c <__mulsi3>
    1a74:	8085883a 	add	r2,r16,r2
    1a78:	10c00017 	ldw	r3,0(r2)
    1a7c:	e0bffb17 	ldw	r2,-20(fp)
    1a80:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    1a84:	04000034 	movhi	r16,0
    1a88:	840dd604 	addi	r16,r16,14168
    1a8c:	e0bffa17 	ldw	r2,-24(fp)
    1a90:	01400304 	movi	r5,12
    1a94:	1009883a 	mov	r4,r2
    1a98:	000254c0 	call	254c <__mulsi3>
    1a9c:	8085883a 	add	r2,r16,r2
    1aa0:	10800104 	addi	r2,r2,4
    1aa4:	10c00017 	ldw	r3,0(r2)
    1aa8:	e0bffb17 	ldw	r2,-20(fp)
    1aac:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    1ab0:	04000034 	movhi	r16,0
    1ab4:	840dd604 	addi	r16,r16,14168
    1ab8:	e0bffa17 	ldw	r2,-24(fp)
    1abc:	01400304 	movi	r5,12
    1ac0:	1009883a 	mov	r4,r2
    1ac4:	000254c0 	call	254c <__mulsi3>
    1ac8:	8085883a 	add	r2,r16,r2
    1acc:	10800204 	addi	r2,r2,8
    1ad0:	10c00017 	ldw	r3,0(r2)
    1ad4:	e0bffb17 	ldw	r2,-20(fp)
    1ad8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    1adc:	e13ffa17 	ldw	r4,-24(fp)
    1ae0:	0001e000 	call	1e00 <alt_release_fd>
  }
} 
    1ae4:	0001883a 	nop
    1ae8:	e6ffff04 	addi	sp,fp,-4
    1aec:	dfc00217 	ldw	ra,8(sp)
    1af0:	df000117 	ldw	fp,4(sp)
    1af4:	dc000017 	ldw	r16,0(sp)
    1af8:	dec00304 	addi	sp,sp,12
    1afc:	f800283a 	ret

00001b00 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    1b00:	defffb04 	addi	sp,sp,-20
    1b04:	dfc00415 	stw	ra,16(sp)
    1b08:	df000315 	stw	fp,12(sp)
    1b0c:	df000304 	addi	fp,sp,12
    1b10:	e13ffd15 	stw	r4,-12(fp)
    1b14:	e17ffe15 	stw	r5,-8(fp)
    1b18:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    1b1c:	01c07fc4 	movi	r7,511
    1b20:	01800044 	movi	r6,1
    1b24:	e17ffd17 	ldw	r5,-12(fp)
    1b28:	01000034 	movhi	r4,0
    1b2c:	210dd904 	addi	r4,r4,14180
    1b30:	0001a1c0 	call	1a1c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    1b34:	01c07fc4 	movi	r7,511
    1b38:	000d883a 	mov	r6,zero
    1b3c:	e17ffe17 	ldw	r5,-8(fp)
    1b40:	01000034 	movhi	r4,0
    1b44:	210dd604 	addi	r4,r4,14168
    1b48:	0001a1c0 	call	1a1c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    1b4c:	01c07fc4 	movi	r7,511
    1b50:	01800044 	movi	r6,1
    1b54:	e17fff17 	ldw	r5,-4(fp)
    1b58:	01000034 	movhi	r4,0
    1b5c:	210ddc04 	addi	r4,r4,14192
    1b60:	0001a1c0 	call	1a1c <alt_open_fd>
}  
    1b64:	0001883a 	nop
    1b68:	e037883a 	mov	sp,fp
    1b6c:	dfc00117 	ldw	ra,4(sp)
    1b70:	df000017 	ldw	fp,0(sp)
    1b74:	dec00204 	addi	sp,sp,8
    1b78:	f800283a 	ret

00001b7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1b7c:	defffe04 	addi	sp,sp,-8
    1b80:	dfc00115 	stw	ra,4(sp)
    1b84:	df000015 	stw	fp,0(sp)
    1b88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1b8c:	d0a00717 	ldw	r2,-32740(gp)
    1b90:	10000326 	beq	r2,zero,1ba0 <alt_get_errno+0x24>
    1b94:	d0a00717 	ldw	r2,-32740(gp)
    1b98:	103ee83a 	callr	r2
    1b9c:	00000106 	br	1ba4 <alt_get_errno+0x28>
    1ba0:	d0a4d004 	addi	r2,gp,-27840
}
    1ba4:	e037883a 	mov	sp,fp
    1ba8:	dfc00117 	ldw	ra,4(sp)
    1bac:	df000017 	ldw	fp,0(sp)
    1bb0:	dec00204 	addi	sp,sp,8
    1bb4:	f800283a 	ret

00001bb8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    1bb8:	defffb04 	addi	sp,sp,-20
    1bbc:	dfc00415 	stw	ra,16(sp)
    1bc0:	df000315 	stw	fp,12(sp)
    1bc4:	dc000215 	stw	r16,8(sp)
    1bc8:	df000304 	addi	fp,sp,12
    1bcc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    1bd0:	e0bffe17 	ldw	r2,-8(fp)
    1bd4:	10800217 	ldw	r2,8(r2)
    1bd8:	10d00034 	orhi	r3,r2,16384
    1bdc:	e0bffe17 	ldw	r2,-8(fp)
    1be0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1be4:	e03ffd15 	stw	zero,-12(fp)
    1be8:	00002306 	br	1c78 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1bec:	04000034 	movhi	r16,0
    1bf0:	840dd604 	addi	r16,r16,14168
    1bf4:	e0bffd17 	ldw	r2,-12(fp)
    1bf8:	01400304 	movi	r5,12
    1bfc:	1009883a 	mov	r4,r2
    1c00:	000254c0 	call	254c <__mulsi3>
    1c04:	8085883a 	add	r2,r16,r2
    1c08:	10c00017 	ldw	r3,0(r2)
    1c0c:	e0bffe17 	ldw	r2,-8(fp)
    1c10:	10800017 	ldw	r2,0(r2)
    1c14:	1880151e 	bne	r3,r2,1c6c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1c18:	04000034 	movhi	r16,0
    1c1c:	840dd604 	addi	r16,r16,14168
    1c20:	e0bffd17 	ldw	r2,-12(fp)
    1c24:	01400304 	movi	r5,12
    1c28:	1009883a 	mov	r4,r2
    1c2c:	000254c0 	call	254c <__mulsi3>
    1c30:	8085883a 	add	r2,r16,r2
    1c34:	10800204 	addi	r2,r2,8
    1c38:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1c3c:	10000b0e 	bge	r2,zero,1c6c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    1c40:	01400304 	movi	r5,12
    1c44:	e13ffd17 	ldw	r4,-12(fp)
    1c48:	000254c0 	call	254c <__mulsi3>
    1c4c:	1007883a 	mov	r3,r2
    1c50:	00800034 	movhi	r2,0
    1c54:	108dd604 	addi	r2,r2,14168
    1c58:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1c5c:	e0bffe17 	ldw	r2,-8(fp)
    1c60:	18800226 	beq	r3,r2,1c6c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    1c64:	00bffcc4 	movi	r2,-13
    1c68:	00000806 	br	1c8c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1c6c:	e0bffd17 	ldw	r2,-12(fp)
    1c70:	10800044 	addi	r2,r2,1
    1c74:	e0bffd15 	stw	r2,-12(fp)
    1c78:	d0a00617 	ldw	r2,-32744(gp)
    1c7c:	1007883a 	mov	r3,r2
    1c80:	e0bffd17 	ldw	r2,-12(fp)
    1c84:	18bfd92e 	bgeu	r3,r2,1bec <__alt_data_end+0xfffe1bec>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    1c88:	0005883a 	mov	r2,zero
}
    1c8c:	e6ffff04 	addi	sp,fp,-4
    1c90:	dfc00217 	ldw	ra,8(sp)
    1c94:	df000117 	ldw	fp,4(sp)
    1c98:	dc000017 	ldw	r16,0(sp)
    1c9c:	dec00304 	addi	sp,sp,12
    1ca0:	f800283a 	ret

00001ca4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    1ca4:	defff604 	addi	sp,sp,-40
    1ca8:	dfc00915 	stw	ra,36(sp)
    1cac:	df000815 	stw	fp,32(sp)
    1cb0:	df000804 	addi	fp,sp,32
    1cb4:	e13ffd15 	stw	r4,-12(fp)
    1cb8:	e17ffe15 	stw	r5,-8(fp)
    1cbc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    1cc0:	00bfffc4 	movi	r2,-1
    1cc4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    1cc8:	00bffb44 	movi	r2,-19
    1ccc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    1cd0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    1cd4:	d1600404 	addi	r5,gp,-32752
    1cd8:	e13ffd17 	ldw	r4,-12(fp)
    1cdc:	000204c0 	call	204c <alt_find_dev>
    1ce0:	e0bff815 	stw	r2,-32(fp)
    1ce4:	e0bff817 	ldw	r2,-32(fp)
    1ce8:	1000051e 	bne	r2,zero,1d00 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    1cec:	e13ffd17 	ldw	r4,-12(fp)
    1cf0:	00020dc0 	call	20dc <alt_find_file>
    1cf4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    1cf8:	00800044 	movi	r2,1
    1cfc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    1d00:	e0bff817 	ldw	r2,-32(fp)
    1d04:	10002b26 	beq	r2,zero,1db4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    1d08:	e13ff817 	ldw	r4,-32(fp)
    1d0c:	00021e40 	call	21e4 <alt_get_fd>
    1d10:	e0bff915 	stw	r2,-28(fp)
    1d14:	e0bff917 	ldw	r2,-28(fp)
    1d18:	1000030e 	bge	r2,zero,1d28 <open+0x84>
    {
      status = index;
    1d1c:	e0bff917 	ldw	r2,-28(fp)
    1d20:	e0bffa15 	stw	r2,-24(fp)
    1d24:	00002506 	br	1dbc <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    1d28:	01400304 	movi	r5,12
    1d2c:	e13ff917 	ldw	r4,-28(fp)
    1d30:	000254c0 	call	254c <__mulsi3>
    1d34:	1007883a 	mov	r3,r2
    1d38:	00800034 	movhi	r2,0
    1d3c:	108dd604 	addi	r2,r2,14168
    1d40:	1885883a 	add	r2,r3,r2
    1d44:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    1d48:	e0fffe17 	ldw	r3,-8(fp)
    1d4c:	00900034 	movhi	r2,16384
    1d50:	10bfffc4 	addi	r2,r2,-1
    1d54:	1886703a 	and	r3,r3,r2
    1d58:	e0bffc17 	ldw	r2,-16(fp)
    1d5c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    1d60:	e0bffb17 	ldw	r2,-20(fp)
    1d64:	1000051e 	bne	r2,zero,1d7c <open+0xd8>
    1d68:	e13ffc17 	ldw	r4,-16(fp)
    1d6c:	0001bb80 	call	1bb8 <alt_file_locked>
    1d70:	e0bffa15 	stw	r2,-24(fp)
    1d74:	e0bffa17 	ldw	r2,-24(fp)
    1d78:	10001016 	blt	r2,zero,1dbc <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    1d7c:	e0bff817 	ldw	r2,-32(fp)
    1d80:	10800317 	ldw	r2,12(r2)
    1d84:	10000826 	beq	r2,zero,1da8 <open+0x104>
    1d88:	e0bff817 	ldw	r2,-32(fp)
    1d8c:	10800317 	ldw	r2,12(r2)
    1d90:	e1ffff17 	ldw	r7,-4(fp)
    1d94:	e1bffe17 	ldw	r6,-8(fp)
    1d98:	e17ffd17 	ldw	r5,-12(fp)
    1d9c:	e13ffc17 	ldw	r4,-16(fp)
    1da0:	103ee83a 	callr	r2
    1da4:	00000106 	br	1dac <open+0x108>
    1da8:	0005883a 	mov	r2,zero
    1dac:	e0bffa15 	stw	r2,-24(fp)
    1db0:	00000206 	br	1dbc <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    1db4:	00bffb44 	movi	r2,-19
    1db8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    1dbc:	e0bffa17 	ldw	r2,-24(fp)
    1dc0:	1000090e 	bge	r2,zero,1de8 <open+0x144>
  {
    alt_release_fd (index);  
    1dc4:	e13ff917 	ldw	r4,-28(fp)
    1dc8:	0001e000 	call	1e00 <alt_release_fd>
    ALT_ERRNO = -status;
    1dcc:	0001b7c0 	call	1b7c <alt_get_errno>
    1dd0:	1007883a 	mov	r3,r2
    1dd4:	e0bffa17 	ldw	r2,-24(fp)
    1dd8:	0085c83a 	sub	r2,zero,r2
    1ddc:	18800015 	stw	r2,0(r3)
    return -1;
    1de0:	00bfffc4 	movi	r2,-1
    1de4:	00000106 	br	1dec <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    1de8:	e0bff917 	ldw	r2,-28(fp)
}
    1dec:	e037883a 	mov	sp,fp
    1df0:	dfc00117 	ldw	ra,4(sp)
    1df4:	df000017 	ldw	fp,0(sp)
    1df8:	dec00204 	addi	sp,sp,8
    1dfc:	f800283a 	ret

00001e00 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    1e00:	defffc04 	addi	sp,sp,-16
    1e04:	dfc00315 	stw	ra,12(sp)
    1e08:	df000215 	stw	fp,8(sp)
    1e0c:	dc000115 	stw	r16,4(sp)
    1e10:	df000204 	addi	fp,sp,8
    1e14:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    1e18:	e0bffe17 	ldw	r2,-8(fp)
    1e1c:	108000d0 	cmplti	r2,r2,3
    1e20:	1000111e 	bne	r2,zero,1e68 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    1e24:	04000034 	movhi	r16,0
    1e28:	840dd604 	addi	r16,r16,14168
    1e2c:	e0bffe17 	ldw	r2,-8(fp)
    1e30:	01400304 	movi	r5,12
    1e34:	1009883a 	mov	r4,r2
    1e38:	000254c0 	call	254c <__mulsi3>
    1e3c:	8085883a 	add	r2,r16,r2
    1e40:	10800204 	addi	r2,r2,8
    1e44:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    1e48:	04000034 	movhi	r16,0
    1e4c:	840dd604 	addi	r16,r16,14168
    1e50:	e0bffe17 	ldw	r2,-8(fp)
    1e54:	01400304 	movi	r5,12
    1e58:	1009883a 	mov	r4,r2
    1e5c:	000254c0 	call	254c <__mulsi3>
    1e60:	8085883a 	add	r2,r16,r2
    1e64:	10000015 	stw	zero,0(r2)
  }
}
    1e68:	0001883a 	nop
    1e6c:	e6ffff04 	addi	sp,fp,-4
    1e70:	dfc00217 	ldw	ra,8(sp)
    1e74:	df000117 	ldw	fp,4(sp)
    1e78:	dc000017 	ldw	r16,0(sp)
    1e7c:	dec00304 	addi	sp,sp,12
    1e80:	f800283a 	ret

00001e84 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    1e84:	defffa04 	addi	sp,sp,-24
    1e88:	df000515 	stw	fp,20(sp)
    1e8c:	df000504 	addi	fp,sp,20
    1e90:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1e94:	0005303a 	rdctl	r2,status
    1e98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1e9c:	e0fffc17 	ldw	r3,-16(fp)
    1ea0:	00bfff84 	movi	r2,-2
    1ea4:	1884703a 	and	r2,r3,r2
    1ea8:	1001703a 	wrctl	status,r2
  
  return context;
    1eac:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    1eb0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    1eb4:	e0bfff17 	ldw	r2,-4(fp)
    1eb8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    1ebc:	e0bffd17 	ldw	r2,-12(fp)
    1ec0:	10800017 	ldw	r2,0(r2)
    1ec4:	e0fffd17 	ldw	r3,-12(fp)
    1ec8:	18c00117 	ldw	r3,4(r3)
    1ecc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    1ed0:	e0bffd17 	ldw	r2,-12(fp)
    1ed4:	10800117 	ldw	r2,4(r2)
    1ed8:	e0fffd17 	ldw	r3,-12(fp)
    1edc:	18c00017 	ldw	r3,0(r3)
    1ee0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    1ee4:	e0bffd17 	ldw	r2,-12(fp)
    1ee8:	e0fffd17 	ldw	r3,-12(fp)
    1eec:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    1ef0:	e0bffd17 	ldw	r2,-12(fp)
    1ef4:	e0fffd17 	ldw	r3,-12(fp)
    1ef8:	10c00015 	stw	r3,0(r2)
    1efc:	e0bffb17 	ldw	r2,-20(fp)
    1f00:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1f04:	e0bffe17 	ldw	r2,-8(fp)
    1f08:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    1f0c:	0001883a 	nop
    1f10:	e037883a 	mov	sp,fp
    1f14:	df000017 	ldw	fp,0(sp)
    1f18:	dec00104 	addi	sp,sp,4
    1f1c:	f800283a 	ret

00001f20 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    1f20:	defffb04 	addi	sp,sp,-20
    1f24:	dfc00415 	stw	ra,16(sp)
    1f28:	df000315 	stw	fp,12(sp)
    1f2c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    1f30:	d0a00917 	ldw	r2,-32732(gp)
    1f34:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    1f38:	d0a4d617 	ldw	r2,-27816(gp)
    1f3c:	10800044 	addi	r2,r2,1
    1f40:	d0a4d615 	stw	r2,-27816(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    1f44:	00002e06 	br	2000 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    1f48:	e0bffd17 	ldw	r2,-12(fp)
    1f4c:	10800017 	ldw	r2,0(r2)
    1f50:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    1f54:	e0bffd17 	ldw	r2,-12(fp)
    1f58:	10800403 	ldbu	r2,16(r2)
    1f5c:	10803fcc 	andi	r2,r2,255
    1f60:	10000426 	beq	r2,zero,1f74 <alt_tick+0x54>
    1f64:	d0a4d617 	ldw	r2,-27816(gp)
    1f68:	1000021e 	bne	r2,zero,1f74 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    1f6c:	e0bffd17 	ldw	r2,-12(fp)
    1f70:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    1f74:	e0bffd17 	ldw	r2,-12(fp)
    1f78:	10800217 	ldw	r2,8(r2)
    1f7c:	d0e4d617 	ldw	r3,-27816(gp)
    1f80:	18801d36 	bltu	r3,r2,1ff8 <alt_tick+0xd8>
    1f84:	e0bffd17 	ldw	r2,-12(fp)
    1f88:	10800403 	ldbu	r2,16(r2)
    1f8c:	10803fcc 	andi	r2,r2,255
    1f90:	1000191e 	bne	r2,zero,1ff8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    1f94:	e0bffd17 	ldw	r2,-12(fp)
    1f98:	10800317 	ldw	r2,12(r2)
    1f9c:	e0fffd17 	ldw	r3,-12(fp)
    1fa0:	18c00517 	ldw	r3,20(r3)
    1fa4:	1809883a 	mov	r4,r3
    1fa8:	103ee83a 	callr	r2
    1fac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    1fb0:	e0bfff17 	ldw	r2,-4(fp)
    1fb4:	1000031e 	bne	r2,zero,1fc4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    1fb8:	e13ffd17 	ldw	r4,-12(fp)
    1fbc:	0001e840 	call	1e84 <alt_alarm_stop>
    1fc0:	00000d06 	br	1ff8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    1fc4:	e0bffd17 	ldw	r2,-12(fp)
    1fc8:	10c00217 	ldw	r3,8(r2)
    1fcc:	e0bfff17 	ldw	r2,-4(fp)
    1fd0:	1887883a 	add	r3,r3,r2
    1fd4:	e0bffd17 	ldw	r2,-12(fp)
    1fd8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    1fdc:	e0bffd17 	ldw	r2,-12(fp)
    1fe0:	10c00217 	ldw	r3,8(r2)
    1fe4:	d0a4d617 	ldw	r2,-27816(gp)
    1fe8:	1880032e 	bgeu	r3,r2,1ff8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    1fec:	e0bffd17 	ldw	r2,-12(fp)
    1ff0:	00c00044 	movi	r3,1
    1ff4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    1ff8:	e0bffe17 	ldw	r2,-8(fp)
    1ffc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2000:	e0fffd17 	ldw	r3,-12(fp)
    2004:	d0a00904 	addi	r2,gp,-32732
    2008:	18bfcf1e 	bne	r3,r2,1f48 <__alt_data_end+0xfffe1f48>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    200c:	0001883a 	nop
}
    2010:	0001883a 	nop
    2014:	e037883a 	mov	sp,fp
    2018:	dfc00117 	ldw	ra,4(sp)
    201c:	df000017 	ldw	fp,0(sp)
    2020:	dec00204 	addi	sp,sp,8
    2024:	f800283a 	ret

00002028 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    2028:	deffff04 	addi	sp,sp,-4
    202c:	df000015 	stw	fp,0(sp)
    2030:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    2034:	000170fa 	wrctl	ienable,zero
}
    2038:	0001883a 	nop
    203c:	e037883a 	mov	sp,fp
    2040:	df000017 	ldw	fp,0(sp)
    2044:	dec00104 	addi	sp,sp,4
    2048:	f800283a 	ret

0000204c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    204c:	defffa04 	addi	sp,sp,-24
    2050:	dfc00515 	stw	ra,20(sp)
    2054:	df000415 	stw	fp,16(sp)
    2058:	df000404 	addi	fp,sp,16
    205c:	e13ffe15 	stw	r4,-8(fp)
    2060:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    2064:	e0bfff17 	ldw	r2,-4(fp)
    2068:	10800017 	ldw	r2,0(r2)
    206c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    2070:	e13ffe17 	ldw	r4,-8(fp)
    2074:	00003e00 	call	3e0 <strlen>
    2078:	10800044 	addi	r2,r2,1
    207c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2080:	00000d06 	br	20b8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2084:	e0bffc17 	ldw	r2,-16(fp)
    2088:	10800217 	ldw	r2,8(r2)
    208c:	e0fffd17 	ldw	r3,-12(fp)
    2090:	180d883a 	mov	r6,r3
    2094:	e17ffe17 	ldw	r5,-8(fp)
    2098:	1009883a 	mov	r4,r2
    209c:	00023640 	call	2364 <memcmp>
    20a0:	1000021e 	bne	r2,zero,20ac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    20a4:	e0bffc17 	ldw	r2,-16(fp)
    20a8:	00000706 	br	20c8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    20ac:	e0bffc17 	ldw	r2,-16(fp)
    20b0:	10800017 	ldw	r2,0(r2)
    20b4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    20b8:	e0fffc17 	ldw	r3,-16(fp)
    20bc:	e0bfff17 	ldw	r2,-4(fp)
    20c0:	18bff01e 	bne	r3,r2,2084 <__alt_data_end+0xfffe2084>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    20c4:	0005883a 	mov	r2,zero
}
    20c8:	e037883a 	mov	sp,fp
    20cc:	dfc00117 	ldw	ra,4(sp)
    20d0:	df000017 	ldw	fp,0(sp)
    20d4:	dec00204 	addi	sp,sp,8
    20d8:	f800283a 	ret

000020dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    20dc:	defffb04 	addi	sp,sp,-20
    20e0:	dfc00415 	stw	ra,16(sp)
    20e4:	df000315 	stw	fp,12(sp)
    20e8:	df000304 	addi	fp,sp,12
    20ec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    20f0:	d0a00217 	ldw	r2,-32760(gp)
    20f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    20f8:	00003106 	br	21c0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    20fc:	e0bffd17 	ldw	r2,-12(fp)
    2100:	10800217 	ldw	r2,8(r2)
    2104:	1009883a 	mov	r4,r2
    2108:	00003e00 	call	3e0 <strlen>
    210c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    2110:	e0bffd17 	ldw	r2,-12(fp)
    2114:	10c00217 	ldw	r3,8(r2)
    2118:	e0bffe17 	ldw	r2,-8(fp)
    211c:	10bfffc4 	addi	r2,r2,-1
    2120:	1885883a 	add	r2,r3,r2
    2124:	10800003 	ldbu	r2,0(r2)
    2128:	10803fcc 	andi	r2,r2,255
    212c:	1080201c 	xori	r2,r2,128
    2130:	10bfe004 	addi	r2,r2,-128
    2134:	10800bd8 	cmpnei	r2,r2,47
    2138:	1000031e 	bne	r2,zero,2148 <alt_find_file+0x6c>
    {
      len -= 1;
    213c:	e0bffe17 	ldw	r2,-8(fp)
    2140:	10bfffc4 	addi	r2,r2,-1
    2144:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2148:	e0bffe17 	ldw	r2,-8(fp)
    214c:	e0ffff17 	ldw	r3,-4(fp)
    2150:	1885883a 	add	r2,r3,r2
    2154:	10800003 	ldbu	r2,0(r2)
    2158:	10803fcc 	andi	r2,r2,255
    215c:	1080201c 	xori	r2,r2,128
    2160:	10bfe004 	addi	r2,r2,-128
    2164:	10800be0 	cmpeqi	r2,r2,47
    2168:	1000081e 	bne	r2,zero,218c <alt_find_file+0xb0>
    216c:	e0bffe17 	ldw	r2,-8(fp)
    2170:	e0ffff17 	ldw	r3,-4(fp)
    2174:	1885883a 	add	r2,r3,r2
    2178:	10800003 	ldbu	r2,0(r2)
    217c:	10803fcc 	andi	r2,r2,255
    2180:	1080201c 	xori	r2,r2,128
    2184:	10bfe004 	addi	r2,r2,-128
    2188:	10000a1e 	bne	r2,zero,21b4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    218c:	e0bffd17 	ldw	r2,-12(fp)
    2190:	10800217 	ldw	r2,8(r2)
    2194:	e0fffe17 	ldw	r3,-8(fp)
    2198:	180d883a 	mov	r6,r3
    219c:	e17fff17 	ldw	r5,-4(fp)
    21a0:	1009883a 	mov	r4,r2
    21a4:	00023640 	call	2364 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    21a8:	1000021e 	bne	r2,zero,21b4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    21ac:	e0bffd17 	ldw	r2,-12(fp)
    21b0:	00000706 	br	21d0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    21b4:	e0bffd17 	ldw	r2,-12(fp)
    21b8:	10800017 	ldw	r2,0(r2)
    21bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    21c0:	e0fffd17 	ldw	r3,-12(fp)
    21c4:	d0a00204 	addi	r2,gp,-32760
    21c8:	18bfcc1e 	bne	r3,r2,20fc <__alt_data_end+0xfffe20fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    21cc:	0005883a 	mov	r2,zero
}
    21d0:	e037883a 	mov	sp,fp
    21d4:	dfc00117 	ldw	ra,4(sp)
    21d8:	df000017 	ldw	fp,0(sp)
    21dc:	dec00204 	addi	sp,sp,8
    21e0:	f800283a 	ret

000021e4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    21e4:	defffa04 	addi	sp,sp,-24
    21e8:	dfc00515 	stw	ra,20(sp)
    21ec:	df000415 	stw	fp,16(sp)
    21f0:	dc000315 	stw	r16,12(sp)
    21f4:	df000404 	addi	fp,sp,16
    21f8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    21fc:	00bffa04 	movi	r2,-24
    2200:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2204:	e03ffc15 	stw	zero,-16(fp)
    2208:	00001d06 	br	2280 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    220c:	04000034 	movhi	r16,0
    2210:	840dd604 	addi	r16,r16,14168
    2214:	e0bffc17 	ldw	r2,-16(fp)
    2218:	01400304 	movi	r5,12
    221c:	1009883a 	mov	r4,r2
    2220:	000254c0 	call	254c <__mulsi3>
    2224:	8085883a 	add	r2,r16,r2
    2228:	10800017 	ldw	r2,0(r2)
    222c:	1000111e 	bne	r2,zero,2274 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    2230:	04000034 	movhi	r16,0
    2234:	840dd604 	addi	r16,r16,14168
    2238:	e0bffc17 	ldw	r2,-16(fp)
    223c:	01400304 	movi	r5,12
    2240:	1009883a 	mov	r4,r2
    2244:	000254c0 	call	254c <__mulsi3>
    2248:	8085883a 	add	r2,r16,r2
    224c:	e0fffe17 	ldw	r3,-8(fp)
    2250:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    2254:	d0e00617 	ldw	r3,-32744(gp)
    2258:	e0bffc17 	ldw	r2,-16(fp)
    225c:	1880020e 	bge	r3,r2,2268 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    2260:	e0bffc17 	ldw	r2,-16(fp)
    2264:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    2268:	e0bffc17 	ldw	r2,-16(fp)
    226c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    2270:	00000606 	br	228c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2274:	e0bffc17 	ldw	r2,-16(fp)
    2278:	10800044 	addi	r2,r2,1
    227c:	e0bffc15 	stw	r2,-16(fp)
    2280:	e0bffc17 	ldw	r2,-16(fp)
    2284:	10800810 	cmplti	r2,r2,32
    2288:	103fe01e 	bne	r2,zero,220c <__alt_data_end+0xfffe220c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    228c:	e0bffd17 	ldw	r2,-12(fp)
}
    2290:	e6ffff04 	addi	sp,fp,-4
    2294:	dfc00217 	ldw	ra,8(sp)
    2298:	df000117 	ldw	fp,4(sp)
    229c:	dc000017 	ldw	r16,0(sp)
    22a0:	dec00304 	addi	sp,sp,12
    22a4:	f800283a 	ret

000022a8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    22a8:	defffe04 	addi	sp,sp,-8
    22ac:	df000115 	stw	fp,4(sp)
    22b0:	df000104 	addi	fp,sp,4
    22b4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    22b8:	e0bfff17 	ldw	r2,-4(fp)
    22bc:	10bffe84 	addi	r2,r2,-6
    22c0:	10c00428 	cmpgeui	r3,r2,16
    22c4:	18001a1e 	bne	r3,zero,2330 <alt_exception_cause_generated_bad_addr+0x88>
    22c8:	100690ba 	slli	r3,r2,2
    22cc:	00800034 	movhi	r2,0
    22d0:	1088b804 	addi	r2,r2,8928
    22d4:	1885883a 	add	r2,r3,r2
    22d8:	10800017 	ldw	r2,0(r2)
    22dc:	1000683a 	jmp	r2
    22e0:	00002320 	cmpeqi	zero,zero,140
    22e4:	00002320 	cmpeqi	zero,zero,140
    22e8:	00002330 	cmpltui	zero,zero,140
    22ec:	00002330 	cmpltui	zero,zero,140
    22f0:	00002330 	cmpltui	zero,zero,140
    22f4:	00002320 	cmpeqi	zero,zero,140
    22f8:	00002328 	cmpgeui	zero,zero,140
    22fc:	00002330 	cmpltui	zero,zero,140
    2300:	00002320 	cmpeqi	zero,zero,140
    2304:	00002320 	cmpeqi	zero,zero,140
    2308:	00002330 	cmpltui	zero,zero,140
    230c:	00002320 	cmpeqi	zero,zero,140
    2310:	00002328 	cmpgeui	zero,zero,140
    2314:	00002330 	cmpltui	zero,zero,140
    2318:	00002330 	cmpltui	zero,zero,140
    231c:	00002320 	cmpeqi	zero,zero,140
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    2320:	00800044 	movi	r2,1
    2324:	00000306 	br	2334 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    2328:	0005883a 	mov	r2,zero
    232c:	00000106 	br	2334 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    2330:	0005883a 	mov	r2,zero
  }
}
    2334:	e037883a 	mov	sp,fp
    2338:	df000017 	ldw	fp,0(sp)
    233c:	dec00104 	addi	sp,sp,4
    2340:	f800283a 	ret

00002344 <exit>:
    2344:	defffe04 	addi	sp,sp,-8
    2348:	000b883a 	mov	r5,zero
    234c:	dc000015 	stw	r16,0(sp)
    2350:	dfc00115 	stw	ra,4(sp)
    2354:	2021883a 	mov	r16,r4
    2358:	00023bc0 	call	23bc <__call_exitprocs>
    235c:	8009883a 	mov	r4,r16
    2360:	00025740 	call	2574 <_exit>

00002364 <memcmp>:
    2364:	218d883a 	add	r6,r4,r6
    2368:	21800826 	beq	r4,r6,238c <memcmp+0x28>
    236c:	20800003 	ldbu	r2,0(r4)
    2370:	28c00003 	ldbu	r3,0(r5)
    2374:	10c00226 	beq	r2,r3,2380 <memcmp+0x1c>
    2378:	10c5c83a 	sub	r2,r2,r3
    237c:	f800283a 	ret
    2380:	21000044 	addi	r4,r4,1
    2384:	29400044 	addi	r5,r5,1
    2388:	003ff706 	br	2368 <__alt_data_end+0xfffe2368>
    238c:	0005883a 	mov	r2,zero
    2390:	f800283a 	ret

00002394 <memcpy>:
    2394:	2005883a 	mov	r2,r4
    2398:	2007883a 	mov	r3,r4
    239c:	218d883a 	add	r6,r4,r6
    23a0:	19800526 	beq	r3,r6,23b8 <memcpy+0x24>
    23a4:	29000003 	ldbu	r4,0(r5)
    23a8:	18c00044 	addi	r3,r3,1
    23ac:	29400044 	addi	r5,r5,1
    23b0:	193fffc5 	stb	r4,-1(r3)
    23b4:	003ffa06 	br	23a0 <__alt_data_end+0xfffe23a0>
    23b8:	f800283a 	ret

000023bc <__call_exitprocs>:
    23bc:	defff504 	addi	sp,sp,-44
    23c0:	dd000515 	stw	r20,20(sp)
    23c4:	05000034 	movhi	r20,0
    23c8:	dc800315 	stw	r18,12(sp)
    23cc:	dfc00a15 	stw	ra,40(sp)
    23d0:	df000915 	stw	fp,36(sp)
    23d4:	ddc00815 	stw	r23,32(sp)
    23d8:	dd800715 	stw	r22,28(sp)
    23dc:	dd400615 	stw	r21,24(sp)
    23e0:	dcc00415 	stw	r19,16(sp)
    23e4:	dc400215 	stw	r17,8(sp)
    23e8:	dc000115 	stw	r16,4(sp)
    23ec:	d9000015 	stw	r4,0(sp)
    23f0:	2825883a 	mov	r18,r5
    23f4:	a50e3604 	addi	r20,r20,14552
    23f8:	a4400017 	ldw	r17,0(r20)
    23fc:	8cc00c17 	ldw	r19,48(r17)
    2400:	8c400c04 	addi	r17,r17,48
    2404:	98004526 	beq	r19,zero,251c <__call_exitprocs+0x160>
    2408:	9c000117 	ldw	r16,4(r19)
    240c:	00900034 	movhi	r2,16384
    2410:	10bfffc4 	addi	r2,r2,-1
    2414:	9d402217 	ldw	r21,136(r19)
    2418:	85bfffc4 	addi	r22,r16,-1
    241c:	80a1883a 	add	r16,r16,r2
    2420:	8421883a 	add	r16,r16,r16
    2424:	8421883a 	add	r16,r16,r16
    2428:	ac2f883a 	add	r23,r21,r16
    242c:	84000204 	addi	r16,r16,8
    2430:	9c21883a 	add	r16,r19,r16
    2434:	b0002716 	blt	r22,zero,24d4 <__call_exitprocs+0x118>
    2438:	90000726 	beq	r18,zero,2458 <__call_exitprocs+0x9c>
    243c:	a800041e 	bne	r21,zero,2450 <__call_exitprocs+0x94>
    2440:	b5bfffc4 	addi	r22,r22,-1
    2444:	bdffff04 	addi	r23,r23,-4
    2448:	843fff04 	addi	r16,r16,-4
    244c:	003ff906 	br	2434 <__alt_data_end+0xfffe2434>
    2450:	b9002017 	ldw	r4,128(r23)
    2454:	913ffa1e 	bne	r18,r4,2440 <__alt_data_end+0xfffe2440>
    2458:	99000117 	ldw	r4,4(r19)
    245c:	82000017 	ldw	r8,0(r16)
    2460:	213fffc4 	addi	r4,r4,-1
    2464:	b100021e 	bne	r22,r4,2470 <__call_exitprocs+0xb4>
    2468:	9d800115 	stw	r22,4(r19)
    246c:	00000106 	br	2474 <__call_exitprocs+0xb8>
    2470:	80000015 	stw	zero,0(r16)
    2474:	403ff226 	beq	r8,zero,2440 <__alt_data_end+0xfffe2440>
    2478:	9f000117 	ldw	fp,4(r19)
    247c:	a8000526 	beq	r21,zero,2494 <__call_exitprocs+0xd8>
    2480:	00800044 	movi	r2,1
    2484:	1592983a 	sll	r9,r2,r22
    2488:	a9404017 	ldw	r5,256(r21)
    248c:	494a703a 	and	r5,r9,r5
    2490:	2800021e 	bne	r5,zero,249c <__call_exitprocs+0xe0>
    2494:	403ee83a 	callr	r8
    2498:	00000906 	br	24c0 <__call_exitprocs+0x104>
    249c:	a9004117 	ldw	r4,260(r21)
    24a0:	4908703a 	and	r4,r9,r4
    24a4:	2000041e 	bne	r4,zero,24b8 <__call_exitprocs+0xfc>
    24a8:	b9400017 	ldw	r5,0(r23)
    24ac:	d9000017 	ldw	r4,0(sp)
    24b0:	403ee83a 	callr	r8
    24b4:	00000206 	br	24c0 <__call_exitprocs+0x104>
    24b8:	b9000017 	ldw	r4,0(r23)
    24bc:	403ee83a 	callr	r8
    24c0:	99000117 	ldw	r4,4(r19)
    24c4:	e13fcc1e 	bne	fp,r4,23f8 <__alt_data_end+0xfffe23f8>
    24c8:	89000017 	ldw	r4,0(r17)
    24cc:	993fdc26 	beq	r19,r4,2440 <__alt_data_end+0xfffe2440>
    24d0:	003fc906 	br	23f8 <__alt_data_end+0xfffe23f8>
    24d4:	00800034 	movhi	r2,0
    24d8:	10800004 	addi	r2,r2,0
    24dc:	10000f26 	beq	r2,zero,251c <__call_exitprocs+0x160>
    24e0:	99400117 	ldw	r5,4(r19)
    24e4:	99000017 	ldw	r4,0(r19)
    24e8:	2800091e 	bne	r5,zero,2510 <__call_exitprocs+0x154>
    24ec:	20000826 	beq	r4,zero,2510 <__call_exitprocs+0x154>
    24f0:	89000015 	stw	r4,0(r17)
    24f4:	a8000226 	beq	r21,zero,2500 <__call_exitprocs+0x144>
    24f8:	a809883a 	mov	r4,r21
    24fc:	00000000 	call	0 <__alt_mem_mem>
    2500:	9809883a 	mov	r4,r19
    2504:	00000000 	call	0 <__alt_mem_mem>
    2508:	8cc00017 	ldw	r19,0(r17)
    250c:	003fbd06 	br	2404 <__alt_data_end+0xfffe2404>
    2510:	9823883a 	mov	r17,r19
    2514:	2027883a 	mov	r19,r4
    2518:	003fba06 	br	2404 <__alt_data_end+0xfffe2404>
    251c:	dfc00a17 	ldw	ra,40(sp)
    2520:	df000917 	ldw	fp,36(sp)
    2524:	ddc00817 	ldw	r23,32(sp)
    2528:	dd800717 	ldw	r22,28(sp)
    252c:	dd400617 	ldw	r21,24(sp)
    2530:	dd000517 	ldw	r20,20(sp)
    2534:	dcc00417 	ldw	r19,16(sp)
    2538:	dc800317 	ldw	r18,12(sp)
    253c:	dc400217 	ldw	r17,8(sp)
    2540:	dc000117 	ldw	r16,4(sp)
    2544:	dec00b04 	addi	sp,sp,44
    2548:	f800283a 	ret

0000254c <__mulsi3>:
    254c:	0005883a 	mov	r2,zero
    2550:	20000726 	beq	r4,zero,2570 <__mulsi3+0x24>
    2554:	20c0004c 	andi	r3,r4,1
    2558:	2008d07a 	srli	r4,r4,1
    255c:	18000126 	beq	r3,zero,2564 <__mulsi3+0x18>
    2560:	1145883a 	add	r2,r2,r5
    2564:	294b883a 	add	r5,r5,r5
    2568:	203ffa1e 	bne	r4,zero,2554 <__alt_data_end+0xfffe2554>
    256c:	f800283a 	ret
    2570:	f800283a 	ret

00002574 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    2574:	defffd04 	addi	sp,sp,-12
    2578:	df000215 	stw	fp,8(sp)
    257c:	df000204 	addi	fp,sp,8
    2580:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    2584:	0001883a 	nop
    2588:	e0bfff17 	ldw	r2,-4(fp)
    258c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    2590:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    2594:	10000226 	beq	r2,zero,25a0 <_exit+0x2c>
    ALT_SIM_FAIL();
    2598:	002af070 	cmpltui	zero,zero,43969
    259c:	00000106 	br	25a4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    25a0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    25a4:	003fff06 	br	25a4 <__alt_data_end+0xfffe25a4>
